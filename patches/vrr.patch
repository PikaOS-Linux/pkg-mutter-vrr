diff '--color=auto' -ruN a/clutter/clutter/clutter-frame-clock.c b/clutter/clutter/clutter-frame-clock.c
--- a/clutter/clutter/clutter-frame-clock.c	2023-09-16 23:51:03.000000000 +0300
+++ b/clutter/clutter/clutter-frame-clock.c	2023-10-07 22:05:39.805099869 +0300
@@ -37,6 +37,8 @@
 
 #define SYNC_DELAY_FALLBACK_FRACTION 0.875
 
+#define MINIMUM_REFRESH_RATE 30
+
 typedef struct _ClutterFrameListener
 {
   const ClutterFrameListenerIface *iface;
@@ -54,6 +56,7 @@
 {
   CLUTTER_FRAME_CLOCK_STATE_INIT,
   CLUTTER_FRAME_CLOCK_STATE_IDLE,
+  CLUTTER_FRAME_CLOCK_STATE_IDLE_TIMEOUT,
   CLUTTER_FRAME_CLOCK_STATE_SCHEDULED,
   CLUTTER_FRAME_CLOCK_STATE_DISPATCHING,
   CLUTTER_FRAME_CLOCK_STATE_PENDING_PRESENTED,
@@ -65,6 +68,8 @@
 
   float refresh_rate;
   int64_t refresh_interval_us;
+  int64_t minimum_refresh_interval_us;
+
   ClutterFrameListener listener;
 
   GSource *source;
@@ -72,6 +77,8 @@
   int64_t frame_count;
 
   ClutterFrameClockState state;
+  ClutterFrameClockMode mode;
+
   int64_t last_dispatch_time_us;
   int64_t last_dispatch_lateness_us;
   int64_t last_presentation_time_us;
@@ -375,6 +382,7 @@
     {
     case CLUTTER_FRAME_CLOCK_STATE_INIT:
     case CLUTTER_FRAME_CLOCK_STATE_IDLE:
+    case CLUTTER_FRAME_CLOCK_STATE_IDLE_TIMEOUT:
     case CLUTTER_FRAME_CLOCK_STATE_SCHEDULED:
       g_warn_if_reached ();
       break;
@@ -395,6 +403,7 @@
     {
     case CLUTTER_FRAME_CLOCK_STATE_INIT:
     case CLUTTER_FRAME_CLOCK_STATE_IDLE:
+    case CLUTTER_FRAME_CLOCK_STATE_IDLE_TIMEOUT:
     case CLUTTER_FRAME_CLOCK_STATE_SCHEDULED:
       g_warn_if_reached ();
       break;
@@ -597,6 +606,39 @@
   *out_min_render_time_allowed_us = min_render_time_allowed_us;
 }
 
+static void
+calculate_next_idle_timeout_us (ClutterFrameClock *frame_clock,
+                                int64_t           *out_next_update_time_us)
+{
+  int64_t now_us;
+  int64_t last_presentation_time_us;
+  int64_t next_presentation_time_us;
+  int64_t timeout_interval_us;
+
+  now_us = g_get_monotonic_time ();
+
+  last_presentation_time_us = frame_clock->last_presentation_time_us;
+
+  timeout_interval_us = frame_clock->minimum_refresh_interval_us;
+
+  if (last_presentation_time_us == 0)
+    {
+      *out_next_update_time_us =
+        frame_clock->last_dispatch_time_us ?
+        ((frame_clock->last_dispatch_time_us -
+          frame_clock->last_dispatch_lateness_us) + timeout_interval_us) :
+        now_us;
+      return;
+    }
+
+  next_presentation_time_us = last_presentation_time_us + timeout_interval_us;
+
+  while (next_presentation_time_us < now_us)
+    next_presentation_time_us += timeout_interval_us;
+
+  *out_next_update_time_us = next_presentation_time_us;
+}
+
 void
 clutter_frame_clock_inhibit (ClutterFrameClock *frame_clock)
 {
@@ -609,6 +651,7 @@
         case CLUTTER_FRAME_CLOCK_STATE_INIT:
         case CLUTTER_FRAME_CLOCK_STATE_IDLE:
           break;
+        case CLUTTER_FRAME_CLOCK_STATE_IDLE_TIMEOUT:
         case CLUTTER_FRAME_CLOCK_STATE_SCHEDULED:
           frame_clock->pending_reschedule = TRUE;
           frame_clock->state = CLUTTER_FRAME_CLOCK_STATE_IDLE;
@@ -650,6 +693,7 @@
     case CLUTTER_FRAME_CLOCK_STATE_INIT:
     case CLUTTER_FRAME_CLOCK_STATE_IDLE:
     case CLUTTER_FRAME_CLOCK_STATE_SCHEDULED:
+    case CLUTTER_FRAME_CLOCK_STATE_IDLE_TIMEOUT:
       next_update_time_us = g_get_monotonic_time ();
       break;
     case CLUTTER_FRAME_CLOCK_STATE_DISPATCHING:
@@ -682,15 +726,12 @@
     {
     case CLUTTER_FRAME_CLOCK_STATE_INIT:
       next_update_time_us = g_get_monotonic_time ();
-      break;
+      g_source_set_ready_time (frame_clock->source, next_update_time_us);
+      frame_clock->state = CLUTTER_FRAME_CLOCK_STATE_SCHEDULED;
+      return;
     case CLUTTER_FRAME_CLOCK_STATE_IDLE:
-      calculate_next_update_time_us (frame_clock,
-                                     &next_update_time_us,
-                                     &frame_clock->next_presentation_time_us,
-                                     &frame_clock->min_render_time_allowed_us);
-      frame_clock->is_next_presentation_time_valid =
-        (frame_clock->next_presentation_time_us != 0);
       break;
+    case CLUTTER_FRAME_CLOCK_STATE_IDLE_TIMEOUT:
     case CLUTTER_FRAME_CLOCK_STATE_SCHEDULED:
       return;
     case CLUTTER_FRAME_CLOCK_STATE_DISPATCHING:
@@ -699,11 +740,56 @@
       return;
     }
 
+  switch (frame_clock->mode)
+    {
+    case CLUTTER_FRAME_CLOCK_MODE_FIXED:
+      calculate_next_update_time_us (frame_clock,
+                                     &next_update_time_us,
+                                     &frame_clock->next_presentation_time_us,
+                                     &frame_clock->min_render_time_allowed_us);
+      frame_clock->is_next_presentation_time_valid =
+            (frame_clock->next_presentation_time_us != 0);
+      frame_clock->state = CLUTTER_FRAME_CLOCK_STATE_SCHEDULED;
+      break;
+    case CLUTTER_FRAME_CLOCK_MODE_VARIABLE:
+      calculate_next_idle_timeout_us (frame_clock,
+                                      &next_update_time_us);
+      frame_clock->is_next_presentation_time_valid = FALSE;
+      frame_clock->state = CLUTTER_FRAME_CLOCK_STATE_IDLE_TIMEOUT;
+      break;
+    }
+
   g_warn_if_fail (next_update_time_us != -1);
 
   frame_clock->next_update_time_us = next_update_time_us;
   g_source_set_ready_time (frame_clock->source, next_update_time_us);
-  frame_clock->state = CLUTTER_FRAME_CLOCK_STATE_SCHEDULED;
+}
+
+void
+clutter_frame_clock_set_mode (ClutterFrameClock     *frame_clock,
+                              ClutterFrameClockMode  mode)
+{
+  if (frame_clock->mode == mode)
+    return;
+
+  frame_clock->mode = mode;
+
+  switch (frame_clock->state)
+    {
+    case CLUTTER_FRAME_CLOCK_STATE_INIT:
+    case CLUTTER_FRAME_CLOCK_STATE_IDLE:
+      break;
+    case CLUTTER_FRAME_CLOCK_STATE_IDLE_TIMEOUT:
+    case CLUTTER_FRAME_CLOCK_STATE_SCHEDULED:
+      frame_clock->state = CLUTTER_FRAME_CLOCK_STATE_IDLE;
+      frame_clock->pending_reschedule = TRUE;
+      break;
+    case CLUTTER_FRAME_CLOCK_STATE_DISPATCHING:
+    case CLUTTER_FRAME_CLOCK_STATE_PENDING_PRESENTED:
+      break;
+    }
+
+  maybe_reschedule_update (frame_clock);
 }
 
 static void
@@ -794,6 +880,7 @@
       g_warn_if_reached ();
       break;
     case CLUTTER_FRAME_CLOCK_STATE_IDLE:
+    case CLUTTER_FRAME_CLOCK_STATE_IDLE_TIMEOUT:
     case CLUTTER_FRAME_CLOCK_STATE_SCHEDULED:
       break;
     case CLUTTER_FRAME_CLOCK_STATE_DISPATCHING:
@@ -918,6 +1005,10 @@
   init_frame_clock_source (frame_clock);
 
   clutter_frame_clock_set_refresh_rate (frame_clock, refresh_rate);
+
+  frame_clock->minimum_refresh_interval_us =
+    (int64_t) (0.5 + G_USEC_PER_SEC / MINIMUM_REFRESH_RATE);
+
   frame_clock->vblank_duration_us = vblank_duration_us;
 
   return frame_clock;
@@ -951,6 +1042,7 @@
 clutter_frame_clock_init (ClutterFrameClock *frame_clock)
 {
   frame_clock->state = CLUTTER_FRAME_CLOCK_STATE_INIT;
+  frame_clock->mode = CLUTTER_FRAME_CLOCK_MODE_FIXED;
 }
 
 static void
diff '--color=auto' -ruN a/clutter/clutter/clutter-frame-clock.h b/clutter/clutter/clutter-frame-clock.h
--- a/clutter/clutter/clutter-frame-clock.h	2023-09-16 23:51:03.000000000 +0300
+++ b/clutter/clutter/clutter-frame-clock.h	2023-10-07 22:05:39.828430984 +0300
@@ -54,6 +54,12 @@
                                 gpointer           user_data);
 } ClutterFrameListenerIface;
 
+typedef enum _ClutterFrameClockMode
+{
+  CLUTTER_FRAME_CLOCK_MODE_FIXED,
+  CLUTTER_FRAME_CLOCK_MODE_VARIABLE,
+} ClutterFrameClockMode;
+
 CLUTTER_EXPORT
 ClutterFrameClock * clutter_frame_clock_new (float                            refresh_rate,
                                              int64_t                          vblank_duration_us,
@@ -64,6 +70,10 @@
 void clutter_frame_clock_destroy (ClutterFrameClock *frame_clock);
 
 CLUTTER_EXPORT
+void clutter_frame_clock_set_mode (ClutterFrameClock     *frame_clock,
+                                   ClutterFrameClockMode  mode);
+
+CLUTTER_EXPORT
 void clutter_frame_clock_notify_presented (ClutterFrameClock *frame_clock,
                                            ClutterFrameInfo  *frame_info);
 
diff '--color=auto' -ruN a/data/61-mutter.rules b/data/61-mutter.rules
--- a/data/61-mutter.rules	2023-09-16 23:51:03.000000000 +0300
+++ b/data/61-mutter.rules	2023-10-07 22:05:39.835097017 +0300
@@ -1,3 +1,4 @@
+DRIVERS=="i915", SUBSYSTEM=="drm", TAG+="mutter-device-disable-vrr"
 DRIVERS=="i915", SUBSYSTEM=="drm", ATTRS{vendor}=="0x8086", ATTRS{device}=="0x1602", TAG+="mutter-device-disable-kms-modifiers"
 DRIVERS=="i915", SUBSYSTEM=="drm", ATTRS{vendor}=="0x8086", ATTRS{device}=="0x1606", TAG+="mutter-device-disable-kms-modifiers"
 DRIVERS=="i915", SUBSYSTEM=="drm", ATTRS{vendor}=="0x8086", ATTRS{device}=="0x160a", TAG+="mutter-device-disable-kms-modifiers"
diff '--color=auto' -ruN a/data/dbus-interfaces/org.gnome.Mutter.DisplayConfig.xml b/data/dbus-interfaces/org.gnome.Mutter.DisplayConfig.xml
--- a/data/dbus-interfaces/org.gnome.Mutter.DisplayConfig.xml	2023-10-07 22:05:17.400642553 +0300
+++ b/data/dbus-interfaces/org.gnome.Mutter.DisplayConfig.xml	2023-10-07 22:05:39.838430033 +0300
@@ -343,6 +343,10 @@
 	    - "is-underscanning" (b): whether underscanning is enabled
 				      (absence of this means underscanning
 				      not being supported)
+	    - "is-vrr-allowed" (b): whether variable refresh rate is allowed
+	                            (absence of this means variable refresh
+	                            rate not being supported)
+
 	    - "max-screen-size" (ii): the maximum size a screen may have
 				      (absence of this means unlimited screen
 				      size)
@@ -466,6 +470,9 @@
 	        - "enable_underscanning" (b): enable monitor underscanning;
 					      may only be set when underscanning
 					      is supported (see GetCurrentState).
+	        - "allow_vrr" (b): whether to allow variable refresh rate; may
+	                           only be set when variable refresh rate is
+	                           supported (see GetCurrentState).
 
 	@properties may effect the global monitor configuration state. Possible
 	properties are:
diff '--color=auto' -ruN a/data/org.gnome.mutter.gschema.xml.in b/data/org.gnome.mutter.gschema.xml.in
--- a/data/org.gnome.mutter.gschema.xml.in	2023-10-07 22:05:17.400642553 +0300
+++ b/data/org.gnome.mutter.gschema.xml.in	2023-10-07 22:07:48.025118196 +0300
@@ -5,6 +5,7 @@
     <value nick="kms-modifiers" value="2"/>
     <value nick="rt-scheduler" value="4"/>
     <value nick="autoclose-xwayland" value="8"/>
+    <value nick="variable-refresh-rate" value="16"/>
   </flags>
 
   <schema id="org.gnome.mutter" path="/org/gnome/mutter/"
@@ -131,6 +132,12 @@
         • “autoclose-xwayland”        — automatically terminates Xwayland if all
                                         relevant X11 clients are gone.
                                         Requires a restart.
+                                        
+        • “variable-refresh-rate”     — makes mutter dynamically adjust the
+                                        refresh rate of the monitor when
+                                        applicable if supported by the monitor,
+                                        GPU and DRM driver. Configurable in
+                                        Settings. Requires a restart.
 
         • “x11-randr-fractional-scaling” — enable fractional scaling under X11
                                            using xrandr scaling. It might reduce
diff '--color=auto' -ruN a/src/backends/meta-monitor.c b/src/backends/meta-monitor.c
--- a/src/backends/meta-monitor.c	2023-10-07 22:05:17.400642553 +0300
+++ b/src/backends/meta-monitor.c	2023-10-07 22:05:39.838430033 +0300
@@ -371,6 +371,25 @@
 }
 
 gboolean
+meta_monitor_is_vrr_capable (MetaMonitor *monitor)
+{
+  const MetaOutputInfo *output_info =
+    meta_monitor_get_main_output_info (monitor);
+
+  return output_info->vrr_capable;
+}
+
+gboolean
+meta_monitor_is_vrr_disallowed (MetaMonitor *monitor)
+{
+  MetaOutput *output;
+
+  output = meta_monitor_get_main_output (monitor);
+
+  return meta_output_is_vrr_disallowed (output);
+}
+
+gboolean
 meta_monitor_get_max_bpc (MetaMonitor  *monitor,
                           unsigned int *max_bpc)
 {
diff '--color=auto' -ruN a/src/backends/meta-monitor-config-manager.c b/src/backends/meta-monitor-config-manager.c
--- a/src/backends/meta-monitor-config-manager.c	2023-10-07 22:05:17.400642553 +0300
+++ b/src/backends/meta-monitor-config-manager.c	2023-10-07 22:05:39.838430033 +0300
@@ -300,6 +300,7 @@
     .is_primary = assign_output_as_primary,
     .is_presentation = assign_output_as_presentation,
     .is_underscanning = data->monitor_config->enable_underscanning,
+    .is_vrr_disallowed = data->monitor_config->disallow_vrr,
     .has_max_bpc = data->monitor_config->has_max_bpc,
     .max_bpc = data->monitor_config->max_bpc
   };
@@ -706,7 +707,8 @@
   *monitor_config = (MetaMonitorConfig) {
     .monitor_spec = meta_monitor_spec_clone (monitor_spec),
     .mode_spec = g_memdup2 (mode_spec, sizeof (MetaMonitorModeSpec)),
-    .enable_underscanning = meta_monitor_is_underscanning (monitor)
+    .enable_underscanning = meta_monitor_is_underscanning (monitor),
+    .disallow_vrr = meta_monitor_is_vrr_disallowed (monitor),
   };
 
   monitor_config->has_max_bpc =
@@ -1099,6 +1101,7 @@
         .mode_spec = g_memdup2 (monitor_config_in->mode_spec,
                                 sizeof (MetaMonitorModeSpec)),
         .enable_underscanning = monitor_config_in->enable_underscanning,
+        .disallow_vrr = monitor_config_in->disallow_vrr,
         .has_max_bpc = monitor_config_in->has_max_bpc,
         .max_bpc = monitor_config_in->max_bpc
       };
diff '--color=auto' -ruN a/src/backends/meta-monitor-config-manager.h b/src/backends/meta-monitor-config-manager.h
--- a/src/backends/meta-monitor-config-manager.h	2023-10-07 22:05:17.400642553 +0300
+++ b/src/backends/meta-monitor-config-manager.h	2023-10-07 22:05:39.838430033 +0300
@@ -31,6 +31,7 @@
   MetaMonitorSpec *monitor_spec;
   MetaMonitorModeSpec *mode_spec;
   gboolean enable_underscanning;
+  gboolean disallow_vrr;
   gboolean has_max_bpc;
   unsigned int max_bpc;
 } MetaMonitorConfig;
diff '--color=auto' -ruN a/src/backends/meta-monitor-config-store.c b/src/backends/meta-monitor-config-store.c
--- a/src/backends/meta-monitor-config-store.c	2023-10-07 22:05:17.400642553 +0300
+++ b/src/backends/meta-monitor-config-store.c	2023-10-07 22:05:39.838430033 +0300
@@ -165,6 +165,7 @@
   STATE_MONITOR_MODE_RATE,
   STATE_MONITOR_MODE_FLAG,
   STATE_MONITOR_UNDERSCANNING,
+  STATE_MONITOR_VRR_ALLOWED,
   STATE_MONITOR_MAXBPC,
   STATE_DISABLED,
   STATE_POLICY,
@@ -450,6 +451,10 @@
           {
             parser->state = STATE_MONITOR_UNDERSCANNING;
           }
+        else if (g_str_equal (element_name, "vrr-allowed"))
+          {
+            parser->state = STATE_MONITOR_VRR_ALLOWED;
+          }
         else if (g_str_equal (element_name, "maxbpc"))
           {
             parser->state = STATE_MONITOR_MAXBPC;
@@ -547,6 +552,13 @@
         return;
       }
 
+    case STATE_MONITOR_VRR_ALLOWED:
+      {
+        g_set_error (error, G_MARKUP_ERROR, G_MARKUP_ERROR_UNKNOWN_ELEMENT,
+                     "Invalid element '%s' under vrr-allowed", element_name);
+        return;
+      }
+
     case STATE_MONITOR_MAXBPC:
       {
         g_set_error (error, G_MARKUP_ERROR, G_MARKUP_ERROR_UNKNOWN_ELEMENT,
@@ -833,6 +845,14 @@
         return;
       }
 
+    case STATE_MONITOR_VRR_ALLOWED:
+      {
+        g_assert (g_str_equal (element_name, "vrr-allowed"));
+
+        parser->state = STATE_MONITOR;
+        return;
+      }
+
     case STATE_MONITOR_MAXBPC:
       {
         g_assert (g_str_equal (element_name, "maxbpc"));
@@ -1344,6 +1364,18 @@
         return;
       }
 
+    case STATE_MONITOR_VRR_ALLOWED:
+      {
+        gboolean allow_vrr = TRUE;
+
+        read_bool (text, text_len,
+                   &allow_vrr,
+                   error);
+        parser->current_monitor_config->disallow_vrr = !allow_vrr;
+
+        return;
+      }
+
     case STATE_MONITOR_MAXBPC:
       {
         int signed_max_bpc;
@@ -1543,6 +1575,9 @@
       if (monitor_config->enable_underscanning)
         g_string_append (buffer, "        <underscanning>yes</underscanning>\n");
 
+      if (monitor_config->disallow_vrr)
+        g_string_append (buffer, "        <vrr-allowed>no</vrr-allowed>\n");
+
       if (monitor_config->has_max_bpc)
         {
           g_string_append_printf (buffer, "        <maxbpc>%u</maxbpc>\n",
diff '--color=auto' -ruN a/src/backends/meta-monitor.h b/src/backends/meta-monitor.h
--- a/src/backends/meta-monitor.h	2023-09-16 23:51:03.000000000 +0300
+++ b/src/backends/meta-monitor.h	2023-10-07 22:05:39.838430033 +0300
@@ -118,6 +118,10 @@
 
 gboolean meta_monitor_is_underscanning (MetaMonitor *monitor);
 
+gboolean meta_monitor_is_vrr_capable (MetaMonitor *monitor);
+
+gboolean meta_monitor_is_vrr_disallowed (MetaMonitor *monitor);
+
 gboolean meta_monitor_get_max_bpc (MetaMonitor  *monitor,
                                    unsigned int *max_bpc);
 
diff '--color=auto' -ruN a/src/backends/meta-monitor-manager.c b/src/backends/meta-monitor-manager.c
--- a/src/backends/meta-monitor-manager.c	2023-10-07 22:05:17.400642553 +0300
+++ b/src/backends/meta-monitor-manager.c	2023-10-07 22:05:39.838430033 +0300
@@ -2391,6 +2391,15 @@
                                  g_variant_new_boolean (is_underscanning));
         }
 
+      if (meta_monitor_is_vrr_capable (monitor))
+        {
+          gboolean vrr_disallowed = meta_monitor_is_vrr_disallowed (monitor);
+
+          g_variant_builder_add (&monitor_properties_builder, "{sv}",
+                                 "is-vrr-allowed",
+                                 g_variant_new_boolean (!vrr_disallowed));
+        }
+
       is_builtin = meta_monitor_is_laptop_panel (monitor);
       g_variant_builder_add (&monitor_properties_builder, "{sv}",
                              "is-builtin",
@@ -2749,6 +2758,8 @@
   g_autoptr (GVariant) properties_variant = NULL;
   gboolean enable_underscanning = FALSE;
   gboolean set_underscanning = FALSE;
+  gboolean allow_vrr = TRUE;
+  gboolean set_allow_vrr = FALSE;
 
   g_variant_get (monitor_config_variant, "(ss@a{sv})",
                  &connector,
@@ -2784,6 +2795,19 @@
         }
     }
 
+  set_allow_vrr =
+    g_variant_lookup (properties_variant, "allow_vrr", "b",
+                      &allow_vrr);
+  if (set_allow_vrr)
+    {
+      if (allow_vrr && !meta_monitor_is_vrr_capable (monitor))
+        {
+          g_set_error (error, G_IO_ERROR, G_IO_ERROR_FAILED,
+                       "Variable refresh rate requested but unsupported");
+          return NULL;
+        }
+    }
+
   monitor_spec = meta_monitor_spec_clone (meta_monitor_get_spec (monitor));
 
   monitor_mode_spec = g_new0 (MetaMonitorModeSpec, 1);
@@ -2793,7 +2817,8 @@
   *monitor_config = (MetaMonitorConfig) {
     .monitor_spec = monitor_spec,
     .mode_spec = monitor_mode_spec,
-    .enable_underscanning = enable_underscanning
+    .enable_underscanning = enable_underscanning,
+    .disallow_vrr = !allow_vrr,
   };
 
   return monitor_config;
diff '--color=auto' -ruN a/src/backends/meta-monitor-manager-private.h b/src/backends/meta-monitor-manager-private.h
--- a/src/backends/meta-monitor-manager-private.h	2023-10-07 22:05:17.400642553 +0300
+++ b/src/backends/meta-monitor-manager-private.h	2023-10-07 22:05:39.838430033 +0300
@@ -105,6 +105,7 @@
   gboolean is_primary;
   gboolean is_presentation;
   gboolean is_underscanning;
+  gboolean is_vrr_disallowed;
   gboolean has_max_bpc;
   unsigned int max_bpc;
 };
diff '--color=auto' -ruN a/src/backends/meta-output.c b/src/backends/meta-output.c
--- a/src/backends/meta-output.c	2023-09-16 23:51:03.000000000 +0300
+++ b/src/backends/meta-output.c	2023-10-07 22:05:39.838430033 +0300
@@ -64,6 +64,8 @@
 
   gboolean is_underscanning;
 
+  gboolean is_vrr_disallowed;
+
   gboolean has_max_bpc;
   unsigned int max_bpc;
 
@@ -198,6 +200,22 @@
 }
 
 gboolean
+meta_output_is_vrr_capable (MetaOutput *output)
+{
+  const MetaOutputInfo *output_info = meta_output_get_info (output);
+
+  return output_info->vrr_capable;
+}
+
+gboolean
+meta_output_is_vrr_disallowed (MetaOutput *output)
+{
+  MetaOutputPrivate *priv = meta_output_get_instance_private (output);
+
+  return priv->is_vrr_disallowed;
+}
+
+gboolean
 meta_output_get_max_bpc (MetaOutput   *output,
                          unsigned int *max_bpc)
 {
@@ -268,6 +286,8 @@
   priv->is_presentation = output_assignment->is_presentation;
   priv->is_underscanning = output_assignment->is_underscanning;
 
+  priv->is_vrr_disallowed = output_assignment->is_vrr_disallowed;
+
   priv->has_max_bpc = output_assignment->has_max_bpc;
   if (priv->has_max_bpc)
     priv->max_bpc = output_assignment->max_bpc;
diff '--color=auto' -ruN a/src/backends/meta-output.h b/src/backends/meta-output.h
--- a/src/backends/meta-output.h	2023-09-16 23:51:03.000000000 +0300
+++ b/src/backends/meta-output.h	2023-10-07 22:05:39.838430033 +0300
@@ -144,6 +144,8 @@
   gboolean supports_underscanning;
   gboolean supports_color_transform;
 
+  gboolean vrr_capable;
+
   unsigned int max_bpc_min;
   unsigned int max_bpc_max;
 
@@ -228,6 +230,11 @@
 META_EXPORT_TEST
 gboolean meta_output_is_underscanning (MetaOutput *output);
 
+gboolean meta_output_is_vrr_capable (MetaOutput *output);
+
+META_EXPORT_TEST
+gboolean meta_output_is_vrr_disallowed (MetaOutput *output);
+
 META_EXPORT_TEST
 gboolean meta_output_get_max_bpc (MetaOutput   *output,
                                   unsigned int *max_bpc);
diff '--color=auto' -ruN a/src/backends/meta-renderer-view.c b/src/backends/meta-renderer-view.c
--- a/src/backends/meta-renderer-view.c	2023-09-16 23:51:03.000000000 +0300
+++ b/src/backends/meta-renderer-view.c	2023-10-07 22:05:39.841763050 +0300
@@ -33,6 +33,7 @@
 #include "backends/meta-renderer-view.h"
 
 #include "backends/meta-crtc.h"
+#include "backends/meta-output.h"
 #include "backends/meta-renderer.h"
 #include "clutter/clutter-mutter.h"
 #include "compositor/region-utils.h"
@@ -43,6 +44,7 @@
 
   PROP_TRANSFORM,
   PROP_CRTC,
+  PROP_OUTPUT,
 
   PROP_LAST
 };
@@ -54,6 +56,7 @@
   MetaMonitorTransform transform;
 
   MetaCrtc *crtc;
+  MetaOutput *output;
 } MetaRendererViewPrivate;
 
 G_DEFINE_TYPE_WITH_PRIVATE (MetaRendererView, meta_renderer_view,
@@ -77,6 +80,15 @@
   return priv->crtc;
 }
 
+MetaOutput *
+meta_renderer_view_get_output (MetaRendererView *view)
+{
+  MetaRendererViewPrivate *priv =
+    meta_renderer_view_get_instance_private (view);
+
+  return priv->output;
+}
+
 static void
 meta_renderer_view_get_offscreen_transformation_matrix (ClutterStageView  *view,
                                                         graphene_matrix_t *matrix)
@@ -151,6 +163,9 @@
     case PROP_CRTC:
       g_value_set_object (value, priv->crtc);
       break;
+    case PROP_OUTPUT:
+      g_value_set_object (value, priv->output);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -175,6 +190,9 @@
     case PROP_CRTC:
       priv->crtc = g_value_get_object (value);
       break;
+    case PROP_OUTPUT:
+      priv->output = g_value_get_object (value);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -217,6 +235,15 @@
                          G_PARAM_READWRITE |
                          G_PARAM_CONSTRUCT_ONLY |
                          G_PARAM_STATIC_STRINGS);
+
+  obj_props[PROP_OUTPUT] =
+    g_param_spec_object ("output",
+                         "MetaOutput",
+                         "MetaOutput",
+                         META_TYPE_OUTPUT,
+                         G_PARAM_READWRITE |
+                         G_PARAM_CONSTRUCT_ONLY |
+                         G_PARAM_STATIC_STRINGS);
 
   g_object_class_install_properties (object_class, PROP_LAST, obj_props);
 }
diff '--color=auto' -ruN a/src/backends/meta-renderer-view.h b/src/backends/meta-renderer-view.h
--- a/src/backends/meta-renderer-view.h	2023-09-16 23:51:03.000000000 +0300
+++ b/src/backends/meta-renderer-view.h	2023-10-07 22:05:39.841763050 +0300
@@ -36,3 +36,5 @@
 
 META_EXPORT_TEST
 MetaCrtc *meta_renderer_view_get_crtc (MetaRendererView *view);
+
+MetaOutput *meta_renderer_view_get_output (MetaRendererView *view);
diff '--color=auto' -ruN a/src/backends/meta-settings.c b/src/backends/meta-settings.c
--- a/src/backends/meta-settings.c	2023-10-07 22:05:17.403975545 +0300
+++ b/src/backends/meta-settings.c	2023-10-07 22:06:44.446230185 +0300
@@ -398,6 +398,8 @@
         feature = META_EXPERIMENTAL_FEATURE_RT_SCHEDULER;
       else if (g_str_equal (feature_str, "autoclose-xwayland"))
         feature = META_EXPERIMENTAL_FEATURE_AUTOCLOSE_XWAYLAND;
+      else if (g_str_equal (feature_str, "variable-refresh-rate"))
+        feature = META_EXPERIMENTAL_FEATURE_VARIABLE_REFRESH_RATE;
       else if (g_str_equal (feature_str, "x11-randr-fractional-scaling"))
         feature = META_EXPERIMENTAL_FEATURE_X11_RANDR_FRACTIONAL_SCALING;
 
diff '--color=auto' -ruN a/src/backends/meta-settings-private.h b/src/backends/meta-settings-private.h
--- a/src/backends/meta-settings-private.h	2023-10-07 22:05:17.400642553 +0300
+++ b/src/backends/meta-settings-private.h	2023-10-07 22:08:50.168187453 +0300
@@ -32,7 +32,8 @@
   META_EXPERIMENTAL_FEATURE_KMS_MODIFIERS = (1 << 1),
   META_EXPERIMENTAL_FEATURE_RT_SCHEDULER = (1 << 2),
   META_EXPERIMENTAL_FEATURE_AUTOCLOSE_XWAYLAND = (1 << 3),
-  META_EXPERIMENTAL_FEATURE_X11_RANDR_FRACTIONAL_SCALING  = (1 << 4),
+  META_EXPERIMENTAL_FEATURE_VARIABLE_REFRESH_RATE = (1 << 4),
+  META_EXPERIMENTAL_FEATURE_X11_RANDR_FRACTIONAL_SCALING  = (1 << 5),
 } MetaExperimentalFeature;
 
 typedef enum _MetaXwaylandExtension
diff '--color=auto' -ruN a/src/backends/native/meta-backend-native.c b/src/backends/native/meta-backend-native.c
--- a/src/backends/native/meta-backend-native.c	2023-09-16 23:51:03.000000000 +0300
+++ b/src/backends/native/meta-backend-native.c	2023-10-07 22:05:39.835097017 +0300
@@ -592,6 +592,9 @@
   if (meta_is_udev_device_disable_modifiers (device))
     flags |= META_KMS_DEVICE_FLAG_DISABLE_MODIFIERS;
 
+  if (meta_is_udev_device_disable_vrr (device))
+    flags |= META_KMS_DEVICE_FLAG_DISABLE_VRR;
+
   if (meta_is_udev_device_preferred_primary (device))
     flags |= META_KMS_DEVICE_FLAG_PREFERRED_PRIMARY;
 
diff '--color=auto' -ruN a/src/backends/native/meta-gpu-kms.c b/src/backends/native/meta-gpu-kms.c
--- a/src/backends/native/meta-gpu-kms.c	2023-09-16 23:51:03.000000000 +0300
+++ b/src/backends/native/meta-gpu-kms.c	2023-10-07 22:05:39.835097017 +0300
@@ -132,6 +132,23 @@
   return !!(flags & META_KMS_DEVICE_FLAG_PLATFORM_DEVICE);
 }
 
+gboolean
+meta_gpu_kms_disable_vrr (MetaGpuKms *gpu_kms)
+{
+  MetaGpu *gpu = META_GPU (gpu_kms);
+  MetaBackend *backend = meta_gpu_get_backend (gpu);
+  MetaSettings *settings = meta_backend_get_settings (backend);
+  MetaKmsDeviceFlag flags;
+
+  if (!meta_settings_is_experimental_feature_enabled (
+        settings,
+        META_EXPERIMENTAL_FEATURE_VARIABLE_REFRESH_RATE))
+    return TRUE;
+
+  flags = meta_kms_device_get_flags (gpu_kms->kms_device);
+  return !!(flags & META_KMS_DEVICE_FLAG_DISABLE_VRR);
+}
+
 static int
 compare_outputs (gconstpointer one,
                  gconstpointer two)
diff '--color=auto' -ruN a/src/backends/native/meta-gpu-kms.h b/src/backends/native/meta-gpu-kms.h
--- a/src/backends/native/meta-gpu-kms.h	2023-09-16 23:51:03.000000000 +0300
+++ b/src/backends/native/meta-gpu-kms.h	2023-10-07 22:05:39.835097017 +0300
@@ -44,6 +44,7 @@
 
 gboolean meta_gpu_kms_is_boot_vga (MetaGpuKms *gpu_kms);
 gboolean meta_gpu_kms_is_platform_device (MetaGpuKms *gpu_kms);
+gboolean meta_gpu_kms_disable_vrr (MetaGpuKms *gpu_kms);
 
 MetaKmsDevice * meta_gpu_kms_get_kms_device (MetaGpuKms *gpu_kms);
 
diff '--color=auto' -ruN a/src/backends/native/meta-kms-connector.c b/src/backends/native/meta-kms-connector.c
--- a/src/backends/native/meta-kms-connector.c	2023-09-16 23:51:03.000000000 +0300
+++ b/src/backends/native/meta-kms-connector.c	2023-10-07 22:05:39.831764001 +0300
@@ -408,6 +408,10 @@
       state->colorspace.supported =
         supported_drm_color_spaces_to_output_color_spaces (prop->supported_variants);
     }
+
+  prop = &props[META_KMS_CONNECTOR_PROP_VRR_CAPABLE];
+  if (prop->prop_id)
+    state->vrr_capable = prop->value;
 }
 
 static CoglSubpixelOrder
@@ -840,6 +844,7 @@
   state = g_new0 (MetaKmsConnectorState, 1);
   state->suggested_x = -1;
   state->suggested_y = -1;
+  state->vrr_capable = FALSE;
 
   return state;
 }
@@ -1013,6 +1018,9 @@
       !hdr_metadata_equal (&state->hdr.value, &new_state->hdr.value))
     return META_KMS_RESOURCE_CHANGE_FULL;
 
+  if (state->vrr_capable != new_state->vrr_capable)
+    return META_KMS_RESOURCE_CHANGE_FULL;
+
   if (state->privacy_screen_state != new_state->privacy_screen_state)
     return META_KMS_RESOURCE_CHANGE_PRIVACY_SCREEN;
 
@@ -1357,6 +1365,11 @@
           .name = "HDR_OUTPUT_METADATA",
           .type = DRM_MODE_PROP_BLOB,
         },
+      [META_KMS_CONNECTOR_PROP_VRR_CAPABLE] =
+        {
+          .name = "vrr_capable",
+          .type = DRM_MODE_PROP_RANGE,
+        },
     },
     .dpms_enum = {
       [META_KMS_CONNECTOR_DPMS_ON] =
diff '--color=auto' -ruN a/src/backends/native/meta-kms-connector.h b/src/backends/native/meta-kms-connector.h
--- a/src/backends/native/meta-kms-connector.h	2023-09-16 23:51:03.000000000 +0300
+++ b/src/backends/native/meta-kms-connector.h	2023-10-07 22:05:39.831764001 +0300
@@ -69,6 +69,8 @@
     gboolean supported;
     gboolean unknown;
   } hdr;
+
+  gboolean vrr_capable;
 } MetaKmsConnectorState;
 
 META_EXPORT_TEST
diff '--color=auto' -ruN a/src/backends/native/meta-kms-connector-private.h b/src/backends/native/meta-kms-connector-private.h
--- a/src/backends/native/meta-kms-connector-private.h	2023-09-16 23:51:03.000000000 +0300
+++ b/src/backends/native/meta-kms-connector-private.h	2023-10-07 22:05:39.828430984 +0300
@@ -39,6 +39,7 @@
   META_KMS_CONNECTOR_PROP_MAX_BPC,
   META_KMS_CONNECTOR_PROP_COLORSPACE,
   META_KMS_CONNECTOR_PROP_HDR_OUTPUT_METADATA,
+  META_KMS_CONNECTOR_PROP_VRR_CAPABLE,
   META_KMS_CONNECTOR_N_PROPS
 } MetaKmsConnectorProp;
 
diff '--color=auto' -ruN a/src/backends/native/meta-kms-crtc.c b/src/backends/native/meta-kms-crtc.c
--- a/src/backends/native/meta-kms-crtc.c	2023-09-16 23:51:03.000000000 +0300
+++ b/src/backends/native/meta-kms-crtc.c	2023-10-07 22:05:39.831764001 +0300
@@ -427,6 +427,11 @@
           .name = "GAMMA_LUT_SIZE",
           .type = DRM_MODE_PROP_RANGE,
         },
+      [META_KMS_CRTC_PROP_VRR_ENABLED] =
+        {
+          .name = "VRR_ENABLED",
+          .type = DRM_MODE_PROP_RANGE,
+        },
     }
   };
 }
diff '--color=auto' -ruN a/src/backends/native/meta-kms-crtc-private.h b/src/backends/native/meta-kms-crtc-private.h
--- a/src/backends/native/meta-kms-crtc-private.h	2023-09-16 23:51:03.000000000 +0300
+++ b/src/backends/native/meta-kms-crtc-private.h	2023-10-07 22:05:39.831764001 +0300
@@ -28,9 +28,17 @@
   META_KMS_CRTC_PROP_ACTIVE,
   META_KMS_CRTC_PROP_GAMMA_LUT,
   META_KMS_CRTC_PROP_GAMMA_LUT_SIZE,
+  META_KMS_CRTC_PROP_VRR_ENABLED,
   META_KMS_CRTC_N_PROPS
 } MetaKmsCrtcProp;
 
+typedef enum _MetaKmsCrtcVRRMode
+{
+  META_KMS_CRTC_VRR_MODE_DISABLED = 0,
+  META_KMS_CRTC_VRR_MODE_ENABLED,
+  META_KMS_CRTC_VRR_MODE_N_PROPS,
+} MetaKmsCrtcVRRMode;
+
 MetaKmsCrtc * meta_kms_crtc_new (MetaKmsImplDevice  *impl_device,
                                  drmModeCrtc        *drm_crtc,
                                  int                 idx,
diff '--color=auto' -ruN a/src/backends/native/meta-kms-impl-device-atomic.c b/src/backends/native/meta-kms-impl-device-atomic.c
--- a/src/backends/native/meta-kms-impl-device-atomic.c	2023-09-16 23:51:03.000000000 +0300
+++ b/src/backends/native/meta-kms-impl-device-atomic.c	2023-10-07 22:05:39.831764001 +0300
@@ -334,6 +334,39 @@
 }
 
 static gboolean
+process_crtc_update (MetaKmsImplDevice  *impl_device,
+                     MetaKmsUpdate      *update,
+                     drmModeAtomicReq   *req,
+                     GArray             *blob_ids,
+                     gpointer            update_entry,
+                     gpointer            user_data,
+                     GError            **error)
+{
+  MetaKmsCrtcUpdate *crtc_update = update_entry;
+  MetaKmsCrtc *crtc = crtc_update->crtc;
+
+  if (crtc_update->vrr_mode.has_update)
+    {
+      meta_topic (META_DEBUG_KMS,
+                  "[atomic] Setting VRR mode to %d on CRTC %u (%s)",
+                  crtc_update->vrr_mode.is_enabled ?
+                    META_KMS_CRTC_VRR_MODE_ENABLED :
+                    META_KMS_CRTC_VRR_MODE_DISABLED,
+                  meta_kms_crtc_get_id (crtc),
+                  meta_kms_impl_device_get_path (impl_device));
+
+      if (!add_crtc_property (impl_device,
+                              crtc, req,
+                              META_KMS_CRTC_PROP_VRR_ENABLED,
+                              crtc_update->vrr_mode.is_enabled,
+                              error))
+        return FALSE;
+    }
+
+  return TRUE;
+}
+
+static gboolean
 process_mode_set (MetaKmsImplDevice  *impl_device,
                   MetaKmsUpdate      *update,
                   drmModeAtomicReq   *req,
@@ -986,6 +1019,16 @@
                         &error))
     goto err;
 
+  if (!process_entries (impl_device,
+                        update,
+                        req,
+                        blob_ids,
+                        meta_kms_update_get_crtc_updates (update),
+                        NULL,
+                        process_crtc_update,
+                        &error))
+    goto err;
+
   if (!process_entries (impl_device,
                         update,
                         req,
diff '--color=auto' -ruN a/src/backends/native/meta-kms-impl-device-simple.c b/src/backends/native/meta-kms-impl-device-simple.c
--- a/src/backends/native/meta-kms-impl-device-simple.c	2023-09-16 23:51:03.000000000 +0300
+++ b/src/backends/native/meta-kms-impl-device-simple.c	2023-10-07 22:05:39.831764001 +0300
@@ -180,6 +180,47 @@
 }
 
 static gboolean
+set_crtc_property (MetaKmsImplDevice  *impl_device,
+                   MetaKmsCrtc        *crtc,
+                   MetaKmsCrtcProp     prop,
+                   uint64_t            value,
+                   GError            **error)
+{
+  uint32_t prop_id;
+  int fd;
+  int ret;
+
+  prop_id = meta_kms_crtc_get_prop_id (crtc, prop);
+  if (!prop_id)
+    {
+      g_set_error (error, G_IO_ERROR, G_IO_ERROR_NOT_SUPPORTED,
+                   "Property (%s) not found on CRTC %u",
+                   meta_kms_crtc_get_prop_name (crtc, prop),
+                   meta_kms_crtc_get_id (crtc));
+      return FALSE;
+    }
+
+  fd = meta_kms_impl_device_get_fd (impl_device);
+
+  ret = drmModeObjectSetProperty (fd,
+                                  meta_kms_crtc_get_id (crtc),
+                                  DRM_MODE_OBJECT_CRTC,
+                                  prop_id,
+                                  value);
+  if (ret != 0)
+    {
+      g_set_error (error, G_IO_ERROR, g_io_error_from_errno (-ret),
+                   "Failed to set CRTC %u property %u: %s",
+                   meta_kms_crtc_get_id (crtc),
+                   prop_id,
+                   g_strerror (-ret));
+      return FALSE;
+    }
+
+  return TRUE;
+}
+
+static gboolean
 process_connector_update (MetaKmsImplDevice  *impl_device,
                           MetaKmsUpdate      *update,
                           gpointer            update_entry,
@@ -268,6 +309,36 @@
   return TRUE;
 }
 
+static gboolean
+process_crtc_update (MetaKmsImplDevice  *impl_device,
+                     MetaKmsUpdate      *update,
+                     gpointer            update_entry,
+                     GError            **error)
+{
+  MetaKmsCrtcUpdate *crtc_update = update_entry;
+  MetaKmsCrtc *crtc = crtc_update->crtc;
+
+  if (crtc_update->vrr_mode.has_update)
+    {
+      meta_topic (META_DEBUG_KMS,
+                  "[simple] Setting VRR mode to %d on CRTC %u (%s)",
+                  crtc_update->vrr_mode.is_enabled ?
+                    META_KMS_CRTC_VRR_MODE_ENABLED :
+                    META_KMS_CRTC_VRR_MODE_DISABLED,
+                  meta_kms_crtc_get_id (crtc),
+                  meta_kms_impl_device_get_path (impl_device));
+
+      if (!set_crtc_property (impl_device,
+                              crtc,
+                              META_KMS_CRTC_PROP_VRR_ENABLED,
+                              crtc_update->vrr_mode.is_enabled,
+                              error))
+        return FALSE;
+    }
+
+  return TRUE;
+}
+
 static CachedModeSet *
 cached_mode_set_new (GList                 *connectors,
                      const drmModeModeInfo *drm_mode,
@@ -1522,6 +1593,13 @@
                         &error))
     goto err;
 
+  if (!process_entries (impl_device,
+                        update,
+                        meta_kms_update_get_crtc_updates (update),
+                        process_crtc_update,
+                        &error))
+    goto err;
+
   if (!process_plane_assignments (impl_device, update, &failed_planes, &error))
     goto err;
 
diff '--color=auto' -ruN a/src/backends/native/meta-kms-types.h b/src/backends/native/meta-kms-types.h
--- a/src/backends/native/meta-kms-types.h	2023-09-16 23:51:03.000000000 +0300
+++ b/src/backends/native/meta-kms-types.h	2023-10-07 22:05:39.835097017 +0300
@@ -64,6 +64,7 @@
   META_KMS_DEVICE_FLAG_HAS_ADDFB2 = 1 << 5,
   META_KMS_DEVICE_FLAG_FORCE_LEGACY = 1 << 6,
   META_KMS_DEVICE_FLAG_DISABLE_CLIENT_MODIFIERS = 1 << 7,
+  META_KMS_DEVICE_FLAG_DISABLE_VRR = 1 << 8,
 } MetaKmsDeviceFlag;
 
 typedef enum _MetaKmsResourceChanges
diff '--color=auto' -ruN a/src/backends/native/meta-kms-update.c b/src/backends/native/meta-kms-update.c
--- a/src/backends/native/meta-kms-update.c	2023-09-16 23:51:03.000000000 +0300
+++ b/src/backends/native/meta-kms-update.c	2023-10-07 22:05:39.835097017 +0300
@@ -40,6 +40,7 @@
   GList *mode_sets;
   GList *plane_assignments;
   GList *connector_updates;
+  GList *crtc_updates;
   GList *crtc_color_updates;
 
   MetaKmsCustomPageFlip *custom_page_flip;
@@ -521,6 +522,46 @@
   g_free (color_update);
 }
 
+static MetaKmsCrtcUpdate *
+ensure_crtc_update (MetaKmsUpdate *update,
+                    MetaKmsCrtc   *crtc)
+{
+  GList *l;
+  MetaKmsCrtcUpdate *crtc_update;
+
+  for (l = update->crtc_updates; l; l = l->next)
+    {
+      crtc_update = l->data;
+
+      if (crtc_update->crtc == crtc)
+        return crtc_update;
+    }
+
+  crtc_update = g_new0 (MetaKmsCrtcUpdate, 1);
+  crtc_update->crtc = crtc;
+
+  update->crtc_updates = g_list_prepend (update->crtc_updates,
+                                         crtc_update);
+
+  return crtc_update;
+}
+
+void
+meta_kms_update_set_vrr_mode (MetaKmsUpdate *update,
+                              MetaKmsCrtc   *crtc,
+                              gboolean       enabled)
+{
+  MetaKmsCrtcUpdate *crtc_update;
+
+  g_assert (meta_kms_crtc_get_device (crtc) == update->device);
+
+  crtc_update = ensure_crtc_update (update, crtc);
+  crtc_update->vrr_mode.has_update = TRUE;
+  crtc_update->vrr_mode.is_enabled = enabled;
+
+  update_latch_crtc (update, crtc);
+}
+
 void
 meta_kms_update_add_page_flip_listener (MetaKmsUpdate                       *update,
                                         MetaKmsCrtc                         *crtc,
@@ -735,6 +776,12 @@
 }
 
 GList *
+meta_kms_update_get_crtc_updates (MetaKmsUpdate *update)
+{
+  return update->crtc_updates;
+}
+
+GList *
 meta_kms_update_get_crtc_color_updates (MetaKmsUpdate *update)
 {
   return update->crtc_color_updates;
@@ -1062,6 +1109,7 @@
   g_list_free_full (update->page_flip_listeners,
                     (GDestroyNotify) meta_kms_page_flip_listener_unref);
   g_list_free_full (update->connector_updates, g_free);
+  g_list_free_full (update->crtc_updates, g_free);
   g_list_free_full (update->crtc_color_updates,
                     (GDestroyNotify) meta_kms_crtc_color_updates_free);
   g_clear_pointer (&update->custom_page_flip, meta_kms_custom_page_flip_free);
diff '--color=auto' -ruN a/src/backends/native/meta-kms-update.h b/src/backends/native/meta-kms-update.h
--- a/src/backends/native/meta-kms-update.h	2023-09-16 23:51:03.000000000 +0300
+++ b/src/backends/native/meta-kms-update.h	2023-10-07 22:05:39.835097017 +0300
@@ -152,6 +152,10 @@
                                      MetaKmsCrtc        *crtc,
                                      const MetaGammaLut *gamma);
 
+void meta_kms_update_set_vrr_mode (MetaKmsUpdate *update,
+                                   MetaKmsCrtc   *crtc,
+                                   gboolean       enabled);
+
 void meta_kms_plane_assignment_set_fb_damage (MetaKmsPlaneAssignment *plane_assignment,
                                               const int              *rectangles,
                                               int                     n_rectangles);
diff '--color=auto' -ruN a/src/backends/native/meta-kms-update-private.h b/src/backends/native/meta-kms-update-private.h
--- a/src/backends/native/meta-kms-update-private.h	2023-09-16 23:51:03.000000000 +0300
+++ b/src/backends/native/meta-kms-update-private.h	2023-10-07 22:05:39.831764001 +0300
@@ -111,6 +111,16 @@
   } hdr;
 } MetaKmsConnectorUpdate;
 
+typedef struct _MetaKmsCrtcUpdate
+{
+  MetaKmsCrtc *crtc;
+
+  struct {
+    gboolean has_update;
+    gboolean is_enabled;
+  } vrr_mode;
+} MetaKmsCrtcUpdate;
+
 typedef struct _MetaKmsPageFlipListener
 {
   gatomicrefcount ref_count;
@@ -178,6 +188,9 @@
 GList * meta_kms_update_get_connector_updates (MetaKmsUpdate *update);
 
 META_EXPORT_TEST
+GList * meta_kms_update_get_crtc_updates (MetaKmsUpdate *update);
+
+META_EXPORT_TEST
 GList * meta_kms_update_get_crtc_color_updates (MetaKmsUpdate *update);
 
 MetaKmsCustomPageFlip * meta_kms_update_take_custom_page_flip_func (MetaKmsUpdate *update);
diff '--color=auto' -ruN a/src/backends/native/meta-output-kms.c b/src/backends/native/meta-output-kms.c
--- a/src/backends/native/meta-output-kms.c	2023-09-16 23:51:03.000000000 +0300
+++ b/src/backends/native/meta-output-kms.c	2023-10-07 22:05:39.838430033 +0300
@@ -96,6 +96,26 @@
 }
 
 void
+meta_output_kms_set_vrr_mode (MetaOutputKms *output_kms,
+                              MetaKmsUpdate *kms_update,
+                              gboolean       enabled)
+{
+  MetaOutput *output = META_OUTPUT (output_kms);
+  const MetaOutputInfo *output_info = meta_output_get_info (output);
+  MetaCrtc *crtc;
+  MetaKmsCrtc *kms_crtc;
+
+  g_assert (output_info->vrr_capable);
+
+  crtc = meta_output_get_assigned_crtc (output);
+  kms_crtc = meta_crtc_kms_get_kms_crtc (META_CRTC_KMS (crtc));
+
+  meta_kms_update_set_vrr_mode (kms_update,
+                                kms_crtc,
+                                enabled);
+}
+
+void
 meta_output_kms_set_max_bpc (MetaOutputKms *output_kms,
                              MetaKmsUpdate *kms_update)
 {
@@ -488,6 +508,9 @@
   output_info->supports_underscanning =
     meta_kms_connector_is_underscanning_supported (kms_connector);
 
+  output_info->vrr_capable = (connector_state->vrr_capable &&
+                              !meta_gpu_kms_disable_vrr (gpu_kms));
+
   max_bpc_range = meta_kms_connector_get_max_bpc (kms_connector);
   if (max_bpc_range)
     {
diff '--color=auto' -ruN a/src/backends/native/meta-output-kms.h b/src/backends/native/meta-output-kms.h
--- a/src/backends/native/meta-output-kms.h	2023-09-16 23:51:03.000000000 +0300
+++ b/src/backends/native/meta-output-kms.h	2023-10-07 22:05:39.838430033 +0300
@@ -37,6 +37,10 @@
 void meta_output_kms_set_underscan (MetaOutputKms *output_kms,
                                     MetaKmsUpdate *kms_update);
 
+void meta_output_kms_set_vrr_mode (MetaOutputKms *output_kms,
+                                   MetaKmsUpdate *kms_update,
+                                   gboolean       enabled);
+
 void meta_output_kms_set_max_bpc (MetaOutputKms *output_kms,
                                   MetaKmsUpdate *kms_update);
 
diff '--color=auto' -ruN a/src/backends/native/meta-renderer-native.c b/src/backends/native/meta-renderer-native.c
--- a/src/backends/native/meta-renderer-native.c	2023-09-16 23:51:03.000000000 +0300
+++ b/src/backends/native/meta-renderer-native.c	2023-10-07 22:05:39.845096066 +0300
@@ -1441,6 +1441,7 @@
                               "stage", meta_backend_get_stage (backend),
                               "layout", &view_layout,
                               "crtc", crtc,
+                              "output", output,
                               "scale", scale,
                               "framebuffer", framebuffer,
                               "offscreen", offscreen,
@@ -1567,8 +1568,11 @@
   if (COGL_IS_ONSCREEN (framebuffer))
     {
       CoglOnscreen *onscreen = COGL_ONSCREEN (framebuffer);
+      MetaRendererViewNative *view_native = META_RENDERER_VIEW_NATIVE (view);
 
       meta_onscreen_native_before_redraw (onscreen, frame);
+      meta_renderer_view_native_maybe_update_frame_sync_mode (view_native,
+                                                              frame);
     }
 }
 
diff '--color=auto' -ruN a/src/backends/native/meta-renderer-view-native.c b/src/backends/native/meta-renderer-view-native.c
--- a/src/backends/native/meta-renderer-view-native.c	2023-09-16 23:51:03.000000000 +0300
+++ b/src/backends/native/meta-renderer-view-native.c	2023-10-07 22:05:39.845096066 +0300
@@ -22,11 +22,28 @@
 
 #include "backends/native/meta-renderer-view-native.h"
 
+#include "backends/meta-output.h"
+#include "backends/native/meta-crtc-kms.h"
 #include "backends/native/meta-frame-native.h"
+#include "backends/native/meta-kms.h"
+#include "backends/native/meta-kms-device.h"
+#include "backends/native/meta-output-kms.h"
+
+#include "clutter/clutter.h"
+
+typedef enum _MetaFrameSyncMode
+{
+  META_FRAME_SYNC_MODE_INIT,
+  META_FRAME_SYNC_MODE_ENABLED,
+  META_FRAME_SYNC_MODE_DISABLED,
+} MetaFrameSyncMode;
 
 struct _MetaRendererViewNative
 {
   MetaRendererView parent;
+
+  MetaFrameSyncMode requested_frame_sync_mode;
+  MetaFrameSyncMode frame_sync_mode;
 };
 
 G_DEFINE_TYPE (MetaRendererViewNative, meta_renderer_view_native,
@@ -39,6 +56,104 @@
 }
 
 static void
+update_frame_sync_mode (MetaRendererViewNative *view_native,
+                        ClutterFrame           *frame,
+                        MetaOutput             *output,
+                        MetaFrameSyncMode       sync_mode)
+{
+  MetaFrameNative *frame_native;
+  MetaCrtc *crtc;
+  MetaKmsCrtc *kms_crtc;
+  MetaKmsDevice *kms_device;
+  MetaKmsUpdate *kms_update;
+  ClutterFrameClock *frame_clock;
+
+  frame_native = meta_frame_native_from_frame (frame);
+
+  frame_clock =
+    clutter_stage_view_get_frame_clock (CLUTTER_STAGE_VIEW (view_native));
+
+  crtc = meta_output_get_assigned_crtc (output);
+  kms_crtc = meta_crtc_kms_get_kms_crtc (META_CRTC_KMS (crtc));
+  kms_device = meta_kms_crtc_get_device (kms_crtc);
+
+  kms_update = meta_frame_native_ensure_kms_update (frame_native, kms_device);
+
+  switch (sync_mode)
+    {
+    case META_FRAME_SYNC_MODE_ENABLED:
+      clutter_frame_clock_set_mode (frame_clock,
+                                    CLUTTER_FRAME_CLOCK_MODE_VARIABLE);
+      meta_output_kms_set_vrr_mode (META_OUTPUT_KMS (output),
+                                    kms_update,
+                                    TRUE);
+      break;
+    case META_FRAME_SYNC_MODE_DISABLED:
+      clutter_frame_clock_set_mode (frame_clock,
+                                    CLUTTER_FRAME_CLOCK_MODE_FIXED);
+      meta_output_kms_set_vrr_mode (META_OUTPUT_KMS (output),
+                                    kms_update,
+                                    FALSE);
+      break;
+    case META_FRAME_SYNC_MODE_INIT:
+      g_assert_not_reached ();
+    }
+
+  view_native->frame_sync_mode = sync_mode;
+}
+
+static MetaFrameSyncMode
+get_applicable_sync_mode (MetaRendererViewNative *view_native,
+                          MetaOutput             *output)
+{
+  if (meta_output_is_vrr_disallowed (output))
+    return META_FRAME_SYNC_MODE_DISABLED;
+
+  return view_native->requested_frame_sync_mode;
+}
+
+void
+meta_renderer_view_native_maybe_update_frame_sync_mode (MetaRendererViewNative *view_native,
+                                                        ClutterFrame           *frame)
+{
+  MetaRendererView *view = META_RENDERER_VIEW (view_native);
+  MetaOutput *output;
+  MetaFrameSyncMode applicable_sync_mode;
+
+  output = meta_renderer_view_get_output (view);
+
+  if (!meta_output_is_vrr_capable (output))
+    return;
+
+  applicable_sync_mode =
+    get_applicable_sync_mode (view_native, output);
+
+  if (G_LIKELY (applicable_sync_mode == view_native->frame_sync_mode))
+    return;
+
+  update_frame_sync_mode (view_native,
+                          frame,
+                          output,
+                          applicable_sync_mode);
+}
+
+void
+meta_renderer_view_native_request_frame_sync (MetaRendererViewNative *view_native,
+                                              gboolean                enabled)
+{
+  view_native->requested_frame_sync_mode =
+    enabled
+    ? META_FRAME_SYNC_MODE_ENABLED
+    : META_FRAME_SYNC_MODE_DISABLED;
+}
+
+gboolean
+meta_renderer_view_native_is_frame_sync_enabled (MetaRendererViewNative *view_native)
+{
+  return view_native->frame_sync_mode == META_FRAME_SYNC_MODE_ENABLED;
+}
+
+static void
 meta_renderer_view_native_class_init (MetaRendererViewNativeClass *klass)
 {
   ClutterStageViewClass *stage_view_class = CLUTTER_STAGE_VIEW_CLASS (klass);
@@ -49,4 +164,6 @@
 static void
 meta_renderer_view_native_init (MetaRendererViewNative *view_native)
 {
+  view_native->requested_frame_sync_mode = META_FRAME_SYNC_MODE_DISABLED;
+  view_native->frame_sync_mode = META_FRAME_SYNC_MODE_INIT;
 }
diff '--color=auto' -ruN a/src/backends/native/meta-renderer-view-native.h b/src/backends/native/meta-renderer-view-native.h
--- a/src/backends/native/meta-renderer-view-native.h	2023-09-16 23:51:03.000000000 +0300
+++ b/src/backends/native/meta-renderer-view-native.h	2023-10-07 22:05:39.845096066 +0300
@@ -27,3 +27,11 @@
 #define META_TYPE_RENDERER_VIEW_NATIVE (meta_renderer_view_native_get_type ())
 G_DECLARE_FINAL_TYPE (MetaRendererViewNative, meta_renderer_view_native,
                       META, RENDERER_VIEW_NATIVE, MetaRendererView)
+
+void meta_renderer_view_native_maybe_update_frame_sync_mode (MetaRendererViewNative *view_native,
+                                                             ClutterFrame           *frame);
+
+void meta_renderer_view_native_request_frame_sync (MetaRendererViewNative *view_native,
+                                                   gboolean                enabled);
+
+gboolean meta_renderer_view_native_is_frame_sync_enabled (MetaRendererViewNative *view_native);
diff '--color=auto' -ruN a/src/backends/native/meta-udev.c b/src/backends/native/meta-udev.c
--- a/src/backends/native/meta-udev.c	2023-09-16 23:51:03.000000000 +0300
+++ b/src/backends/native/meta-udev.c	2023-10-07 22:05:39.835097017 +0300
@@ -101,6 +101,13 @@
 }
 
 gboolean
+meta_is_udev_device_disable_vrr (GUdevDevice *device)
+{
+  return meta_has_udev_device_tag (device,
+                                   "mutter-device-disable-vrr");
+}
+
+gboolean
 meta_is_udev_device_ignore (GUdevDevice *device)
 {
   return meta_has_udev_device_tag (device, "mutter-device-ignore");
diff '--color=auto' -ruN a/src/backends/native/meta-udev.h b/src/backends/native/meta-udev.h
--- a/src/backends/native/meta-udev.h	2023-09-16 23:51:03.000000000 +0300
+++ b/src/backends/native/meta-udev.h	2023-10-07 22:05:39.835097017 +0300
@@ -32,6 +32,8 @@
 
 gboolean meta_is_udev_device_disable_modifiers (GUdevDevice *device);
 
+gboolean meta_is_udev_device_disable_vrr (GUdevDevice *device);
+
 gboolean meta_is_udev_device_ignore (GUdevDevice *device);
 
 gboolean meta_is_udev_test_device (GUdevDevice *device);
diff '--color=auto' -ruN a/src/backends/x11/nested/meta-renderer-x11-nested.c b/src/backends/x11/nested/meta-renderer-x11-nested.c
--- a/src/backends/x11/nested/meta-renderer-x11-nested.c	2023-09-16 23:51:03.000000000 +0300
+++ b/src/backends/x11/nested/meta-renderer-x11-nested.c	2023-10-07 22:05:39.841763050 +0300
@@ -138,6 +138,7 @@
                        "stage", meta_backend_get_stage (backend),
                        "layout", &view_layout,
                        "crtc", crtc,
+                       "output", output,
                        "refresh-rate", mode_info->refresh_rate,
                        "framebuffer", COGL_FRAMEBUFFER (fake_onscreen),
                        "offscreen", COGL_FRAMEBUFFER (offscreen),
diff '--color=auto' -ruN a/src/compositor/meta-compositor-native.c b/src/compositor/meta-compositor-native.c
--- a/src/compositor/meta-compositor-native.c	2023-09-16 23:51:03.000000000 +0300
+++ b/src/compositor/meta-compositor-native.c	2023-10-07 22:05:39.845096066 +0300
@@ -43,6 +43,9 @@
                                                     compositor);
 #endif
 
+  meta_compositor_view_native_maybe_update_frame_sync_surface (compositor_view_native,
+                                                               compositor);
+
   parent_class = META_COMPOSITOR_CLASS (meta_compositor_native_parent_class);
   parent_class->before_paint (compositor, compositor_view);
 }
diff '--color=auto' -ruN a/src/compositor/meta-compositor-view-native.c b/src/compositor/meta-compositor-view-native.c
--- a/src/compositor/meta-compositor-view-native.c	2023-09-16 23:51:03.000000000 +0300
+++ b/src/compositor/meta-compositor-view-native.c	2023-10-07 22:05:39.845096066 +0300
@@ -26,14 +26,20 @@
 
 #include "backends/meta-crtc.h"
 #include "backends/native/meta-crtc-kms.h"
+#include "backends/native/meta-renderer-view-native.h"
+#include "clutter/clutter.h"
 #include "compositor/compositor-private.h"
 #include "compositor/meta-window-actor-private.h"
+#include "core/window-private.h"
 
 #ifdef HAVE_WAYLAND
 #include "compositor/meta-surface-actor-wayland.h"
 #include "wayland/meta-wayland-surface.h"
 #endif /* HAVE_WAYLAND */
 
+static void update_frame_sync_surface (MetaCompositorViewNative *view_native,
+                                       MetaSurfaceActor         *surface_actor);
+
 struct _MetaCompositorViewNative
 {
   MetaCompositorView parent;
@@ -41,11 +47,52 @@
 #ifdef HAVE_WAYLAND
   MetaWaylandSurface *scanout_candidate;
 #endif /* HAVE_WAYLAND */
+
+  MetaSurfaceActor *frame_sync_surface;
+
+  gulong frame_sync_surface_repaint_scheduled_id;
+  gulong frame_sync_surface_frozen_id;
+  gulong frame_sync_surface_destroy_id;
 };
 
 G_DEFINE_TYPE (MetaCompositorViewNative, meta_compositor_view_native,
                META_TYPE_COMPOSITOR_VIEW)
 
+static void
+on_frame_sync_surface_repaint_scheduled (MetaSurfaceActor         *surface_actor,
+                                         MetaCompositorViewNative *view_native)
+{
+  MetaCompositorView *compositor_view = META_COMPOSITOR_VIEW (view_native);
+  ClutterStageView *stage_view;
+  MetaRendererViewNative *renderer_view_native;
+
+  stage_view = meta_compositor_view_get_stage_view (compositor_view);
+  renderer_view_native = META_RENDERER_VIEW_NATIVE (stage_view);
+
+  if (meta_renderer_view_native_is_frame_sync_enabled (renderer_view_native))
+    {
+      ClutterFrameClock *frame_clock;
+
+      frame_clock = clutter_stage_view_get_frame_clock (stage_view);
+
+      clutter_frame_clock_schedule_update_now (frame_clock);
+    }
+}
+
+static void
+on_frame_sync_surface_frozen (MetaSurfaceActor         *surface_actor,
+                              MetaCompositorViewNative *view_native)
+{
+  update_frame_sync_surface (view_native, NULL);
+}
+
+static void
+on_frame_sync_surface_destroyed (MetaSurfaceActor         *surface_actor,
+                                 MetaCompositorViewNative *view_native)
+{
+  update_frame_sync_surface (view_native, NULL);
+}
+
 #ifdef HAVE_WAYLAND
 static void
 update_scanout_candidate (MetaCompositorViewNative *view_native,
@@ -269,6 +316,151 @@
 }
 #endif /* HAVE_WAYLAND */
 
+static MetaSurfaceActor *
+find_frame_sync_candidate (MetaCompositorView *compositor_view,
+                           MetaCompositor     *compositor)
+{
+  MetaWindowActor *window_actor;
+  MetaWindow *window;
+  ClutterStageView *stage_view;
+  MtkRectangle view_layout;
+  MetaSurfaceActor *surface_actor;
+
+  if (meta_compositor_is_unredirect_inhibited (compositor))
+    {
+      meta_topic (META_DEBUG_RENDER,
+                  "No frame sync candidate: unredirect inhibited");
+      return NULL;
+    }
+
+  window_actor =
+    meta_compositor_view_get_top_window_actor (compositor_view);
+  if (!window_actor)
+    {
+      meta_topic (META_DEBUG_RENDER,
+                  "No frame sync candidate: no top window actor");
+      return NULL;
+    }
+
+  if (meta_window_actor_is_frozen (window_actor))
+    {
+      meta_topic (META_DEBUG_RENDER,
+                  "No frame sync candidate: window-actor is frozen");
+      return NULL;
+    }
+
+  if (meta_window_actor_effect_in_progress (window_actor))
+    {
+      meta_topic (META_DEBUG_RENDER,
+                  "No frame sync candidate: window-actor effects in progress");
+      return NULL;
+    }
+
+  if (clutter_actor_has_transitions (CLUTTER_ACTOR (window_actor)))
+    {
+      meta_topic (META_DEBUG_RENDER,
+                  "No frame sync candidate: window-actor has transition");
+      return NULL;
+    }
+
+  window = meta_window_actor_get_meta_window (window_actor);
+  if (!window)
+    {
+      meta_topic (META_DEBUG_RENDER,
+                  "No frame sync candidate: no meta-window");
+      return NULL;
+    }
+
+  stage_view = meta_compositor_view_get_stage_view (compositor_view);
+
+  clutter_stage_view_get_layout (stage_view, &view_layout);
+
+  if (!meta_window_frame_contains_rect (window, &view_layout))
+    {
+      meta_topic (META_DEBUG_RENDER,
+                  "No frame sync candidate: stage-view layout not covered "
+                  "by meta-window frame");
+      return NULL;
+    }
+
+  surface_actor = meta_window_actor_get_scanout_candidate (window_actor);
+  if (!surface_actor)
+    {
+      meta_topic (META_DEBUG_RENDER,
+                  "No frame sync candidate: window-actor has no scanout candidate");
+      return NULL;
+    }
+
+  if (!meta_surface_actor_contains_rect (surface_actor,
+                                         &view_layout))
+    {
+      meta_topic (META_DEBUG_RENDER,
+                  "No frame sync candidate: stage-view layout not covered "
+                  "by surface-actor");
+      return NULL;
+    }
+
+  return surface_actor;
+}
+
+static void
+update_frame_sync_surface (MetaCompositorViewNative *view_native,
+                           MetaSurfaceActor         *surface_actor)
+{
+  MetaCompositorView *compositor_view =
+    META_COMPOSITOR_VIEW (view_native);
+  ClutterStageView *stage_view;
+  MetaRendererViewNative *renderer_view_native;
+
+  g_clear_signal_handler (&view_native->frame_sync_surface_repaint_scheduled_id,
+                          view_native->frame_sync_surface);
+  g_clear_signal_handler (&view_native->frame_sync_surface_frozen_id,
+                          view_native->frame_sync_surface);
+  g_clear_signal_handler (&view_native->frame_sync_surface_destroy_id,
+                          view_native->frame_sync_surface);
+
+  if (surface_actor)
+    {
+      view_native->frame_sync_surface_repaint_scheduled_id =
+        g_signal_connect (surface_actor, "repaint-scheduled",
+                          G_CALLBACK (on_frame_sync_surface_repaint_scheduled),
+                          view_native);
+      view_native->frame_sync_surface_frozen_id =
+        g_signal_connect (surface_actor, "frozen",
+                          G_CALLBACK (on_frame_sync_surface_frozen),
+                          view_native);
+      view_native->frame_sync_surface_destroy_id =
+        g_signal_connect (surface_actor, "destroy",
+                          G_CALLBACK (on_frame_sync_surface_destroyed),
+                          view_native);
+    }
+
+  view_native->frame_sync_surface = surface_actor;
+
+  stage_view = meta_compositor_view_get_stage_view (compositor_view);
+  renderer_view_native = META_RENDERER_VIEW_NATIVE (stage_view);
+
+  meta_renderer_view_native_request_frame_sync (renderer_view_native,
+                                                surface_actor != NULL);
+}
+
+void
+meta_compositor_view_native_maybe_update_frame_sync_surface (MetaCompositorViewNative *view_native,
+                                                             MetaCompositor           *compositor)
+{
+  MetaCompositorView *compositor_view = META_COMPOSITOR_VIEW (view_native);
+  MetaSurfaceActor *surface_actor;
+
+  surface_actor = find_frame_sync_candidate (compositor_view,
+                                             compositor);
+
+  if (G_LIKELY (surface_actor == view_native->frame_sync_surface))
+    return;
+
+  update_frame_sync_surface (view_native,
+                             surface_actor);
+}
+
 MetaCompositorViewNative *
 meta_compositor_view_native_new (ClutterStageView *stage_view)
 {
@@ -280,6 +472,25 @@
 }
 
 static void
+meta_compositor_view_native_dispose (GObject *object)
+{
+  MetaCompositorViewNative *view_native = META_COMPOSITOR_VIEW_NATIVE (object);
+
+  if (view_native->frame_sync_surface)
+    {
+      g_clear_signal_handler (&view_native->frame_sync_surface_repaint_scheduled_id,
+                              view_native->frame_sync_surface);
+      g_clear_signal_handler (&view_native->frame_sync_surface_destroy_id,
+                              view_native->frame_sync_surface);
+      g_clear_signal_handler (&view_native->frame_sync_surface_frozen_id,
+                              view_native->frame_sync_surface);
+      view_native->frame_sync_surface = NULL;
+    }
+
+  G_OBJECT_CLASS (meta_compositor_view_native_parent_class)->dispose (object);
+}
+
+static void
 meta_compositor_view_native_finalize (GObject *object)
 {
 #ifdef HAVE_WAYLAND
@@ -296,6 +507,7 @@
 {
   GObjectClass *object_class = G_OBJECT_CLASS (klass);
 
+  object_class->dispose = meta_compositor_view_native_dispose;
   object_class->finalize = meta_compositor_view_native_finalize;
 }
 
diff '--color=auto' -ruN a/src/compositor/meta-compositor-view-native.h b/src/compositor/meta-compositor-view-native.h
--- a/src/compositor/meta-compositor-view-native.h	2023-09-16 23:51:03.000000000 +0300
+++ b/src/compositor/meta-compositor-view-native.h	2023-10-07 22:05:39.845096066 +0300
@@ -36,3 +36,6 @@
 void meta_compositor_view_native_maybe_assign_scanout (MetaCompositorViewNative *view_native,
                                                        MetaCompositor           *compositor);
 #endif /* HAVE_WAYLAND */
+
+void meta_compositor_view_native_maybe_update_frame_sync_surface (MetaCompositorViewNative *view_native,
+                                                                  MetaCompositor           *compositor);
diff '--color=auto' -ruN a/src/compositor/meta-surface-actor.c b/src/compositor/meta-surface-actor.c
--- a/src/compositor/meta-surface-actor.c	2023-09-16 23:51:03.000000000 +0300
+++ b/src/compositor/meta-surface-actor.c	2023-10-07 22:05:39.845096066 +0300
@@ -63,6 +63,7 @@
 {
   REPAINT_SCHEDULED,
   SIZE_CHANGED,
+  FROZEN,
 
   LAST_SIGNAL,
 };
@@ -296,6 +297,13 @@
                                         0,
                                         NULL, NULL, NULL,
                                         G_TYPE_NONE, 0);
+
+  signals[FROZEN] = g_signal_new ("frozen",
+                                  G_TYPE_FROM_CLASS (object_class),
+                                  G_SIGNAL_RUN_LAST,
+                                  0,
+                                  NULL, NULL, NULL,
+                                  G_TYPE_NONE, 0);
 }
 
 gboolean
@@ -543,6 +551,22 @@
                                                       stage_view);
 }
 
+gboolean
+meta_surface_actor_contains_rect (MetaSurfaceActor *surface_actor,
+                                  MtkRectangle    *rect)
+{
+  ClutterActor *actor = CLUTTER_ACTOR (surface_actor);
+  graphene_rect_t bounding_rect;
+  graphene_rect_t bound_rect;
+
+  clutter_actor_get_transformed_extents (actor, &bounding_rect);
+
+  bound_rect = mtk_rectangle_to_graphene_rect(rect);
+
+  return graphene_rect_contains_rect (&bounding_rect,
+                                      &bound_rect);
+}
+
 void
 meta_surface_actor_set_input_region (MetaSurfaceActor *self,
                                      cairo_region_t   *region)
@@ -624,6 +648,9 @@
 
   priv->frozen = frozen;
 
+  if (frozen)
+    g_signal_emit (self, signals[FROZEN], 0);
+
   if (!frozen && priv->pending_damage)
     {
       int i, n_rects = cairo_region_num_rectangles (priv->pending_damage);
diff '--color=auto' -ruN a/src/compositor/meta-surface-actor.h b/src/compositor/meta-surface-actor.h
--- a/src/compositor/meta-surface-actor.h	2023-09-16 23:51:03.000000000 +0300
+++ b/src/compositor/meta-surface-actor.h	2023-10-07 22:05:39.845096066 +0300
@@ -42,6 +42,9 @@
                                                        ClutterStageView *stage_view,
                                                        float            *unobscurred_fraction);
 
+gboolean meta_surface_actor_contains_rect (MetaSurfaceActor *surface_actor,
+                                           MtkRectangle    *rect);
+
 void meta_surface_actor_set_input_region (MetaSurfaceActor *self,
                                           cairo_region_t   *region);
 void meta_surface_actor_set_opaque_region (MetaSurfaceActor *self,
diff '--color=auto' -ruN a/src/core/window.c b/src/core/window.c
--- a/src/core/window.c	2023-10-07 22:05:17.473968384 +0300
+++ b/src/core/window.c	2023-10-07 22:05:39.845096066 +0300
@@ -4385,6 +4385,14 @@
     window->size_hints.height_inc;
 }
 
+gboolean
+meta_window_frame_contains_rect (MetaWindow    *window,
+                                 MtkRectangle *rect)
+{
+  return mtk_rectangle_contains_rect (&window->rect,
+                                       rect);
+}
+
 /**
  * meta_window_get_buffer_rect:
  * @window: a #MetaWindow
diff '--color=auto' -ruN a/src/core/window-private.h b/src/core/window-private.h
--- a/src/core/window-private.h	2023-10-07 22:05:17.473968384 +0300
+++ b/src/core/window-private.h	2023-10-07 22:05:39.845096066 +0300
@@ -709,6 +709,9 @@
                                               int         *width,
                                               int         *height);
 
+gboolean    meta_window_frame_contains_rect (MetaWindow    *window,
+                                             MtkRectangle *rect);
+
 void        meta_window_update_unfocused_button_grabs (MetaWindow *window);
 
 void        meta_window_update_appears_focused (MetaWindow *window);
diff '--color=auto' -ruN a/src/meson.build.orig b/src/meson.build.orig
--- a/src/meson.build.orig	2023-09-16 23:51:03.000000000 +0300
+++ b/src/meson.build.orig	1970-01-01 02:00:00.000000000 +0200
@@ -1,1309 +0,0 @@
-mutter_includesubdir = pkgname / 'meta'
-mutter_includedir = includedir / mutter_includesubdir
-
-mutter_includes = [
-  include_directories('.'),
-  top_includepath,
-  clutter_includepath,
-  cogl_includepath,
-]
-
-mutter_lib_deps = [
-  m_dep,
-]
-
-mutter_pkg_deps = [
-  cairo_dep,
-  gio_unix_dep,
-  glib_dep,
-  gsettings_desktop_schemas_dep,
-  pango_dep,
-]
-
-mutter_pkg_private_deps = [
-  colord_dep,
-  lcms2_dep,
-  gmodule_no_export_dep,
-  gnome_settings_daemon_dep,
-  json_glib_dep,
-  xkbcommon_dep,
-  libeis_dep,
-]
-
-if have_gnome_desktop
-  mutter_pkg_private_deps += [
-    gnome_desktop_dep,
-  ]
-endif
-
-if have_libdisplay_info
-  mutter_pkg_private_deps += [
-    libdisplay_info_dep,
-  ]
-endif
-
-if have_sound_player
-  mutter_pkg_private_deps += [
-    libcanberra_dep,
-  ]
-endif
-
-if have_gl
-  mutter_pkg_deps += [
-    gl_dep,
-  ]
-endif
-
-if have_gles2
-  mutter_pkg_private_deps += [
-    gles2_dep,
-  ]
-endif
-
-if have_egl
-  mutter_pkg_deps += [
-    egl_dep,
-  ]
-endif
-
-if have_libgudev
-  mutter_pkg_private_deps += [
-    gudev_dep,
-    libudev_dep,
-  ]
-endif
-
-if have_startup_notification
-  mutter_pkg_private_deps += [
-    libstartup_notification_dep,
-  ]
-endif
-
-if have_libwacom
-  mutter_pkg_private_deps += [
-    libwacom_dep,
-  ]
-endif
-
-if have_remote_desktop
-  mutter_pkg_private_deps += [
-    libpipewire_dep,
-    libeis_dep,
-  ]
-endif
-
-if have_introspection
-  mutter_pkg_private_deps += [
-    gobject_introspection_dep,
-  ]
-endif
-
-if have_x11
-  mutter_pkg_deps += [
-    xfixes_dep,
-    xi_dep,
-    x11_dep,
-  ]
-
-  mutter_pkg_private_deps += [
-    xrandr_dep,
-    xinerama_dep,
-    xext_dep,
-    ice_dep,
-    xcomposite_dep,
-    xcursor_dep,
-    xdamage_dep,
-    xkbfile_dep,
-    xkeyboard_config_dep,
-    xkbcommon_x11_dep,
-    xrender_dep,
-    x11_xcb_dep,
-    xcb_randr_dep,
-    xcb_res_dep,
-    xau_dep,
-    xtst_dep,
-  ]
-
-  if have_sm
-    mutter_pkg_private_deps += [
-      sm_dep,
-    ]
-  endif
-endif
-
-if have_wayland
-  mutter_pkg_deps += [
-    wayland_server_dep,
-  ]
-endif
-
-if have_libsystemd
-  mutter_pkg_private_deps += [
-    libsystemd_dep,
-  ]
-endif
-
-if have_native_backend
-  mutter_pkg_private_deps += [
-    libinput_dep,
-    gudev_dep,
-    libgbm_dep,
-    logind_provider_dep,
-    libudev_dep,
-    xkbcommon_dep,
-  ]
-endif
-
-if have_wayland or have_native_backend
-  mutter_pkg_private_deps += [
-    libdrm_dep,
-  ]
-endif
-
-if have_wayland_eglstream
-  mutter_lib_deps += [
-    dl_dep,
-  ]
-  mutter_pkg_private_deps += [
-    wayland_eglstream_protocols_dep,
-  ]
-endif
-
-mutter_deps = [
-  mutter_pkg_deps,
-  mutter_pkg_private_deps,
-  mutter_lib_deps,
-]
-
-mutter_c_args = [
-  '-DCLUTTER_ENABLE_COMPOSITOR_API',
-  '-DCOGL_ENABLE_EXPERIMENTAL_API',
-  '-DCOGL_ENABLE_EXPERIMENTAL_2_0_API',
-  '-DCOGL_ENABLE_MUTTER_API',
-  '-DCLUTTER_DISABLE_DEPRECATION_WARNINGS',
-  '-DCOGL_DISABLE_DEPRECATION_WARNINGS',
-  '-DSN_API_NOT_YET_FROZEN=1',
-  '-DGETTEXT_PACKAGE="@0@"'.format(meson.project_name()),
-]
-
-if get_option('verbose')
-  mutter_c_args += [
-    '-DWITH_VERBOSE_MODE'
-  ]
-endif
-
-mutter_sources = [
-  'backends/edid.h',
-  'backends/edid-parse.c',
-  'backends/gsm-inhibitor-flag.h',
-  'backends/meta-backend.c',
-  'backends/meta-backend-private.h',
-  'backends/meta-barrier.c',
-  'backends/meta-barrier-private.h',
-  'backends/meta-color-device.c',
-  'backends/meta-color-device.h',
-  'backends/meta-color-manager.c',
-  'backends/meta-color-manager.h',
-  'backends/meta-color-manager-private.h',
-  'backends/meta-color-profile.c',
-  'backends/meta-color-profile.h',
-  'backends/meta-color-store.c',
-  'backends/meta-color-store.h',
-  'backends/meta-crtc-mode.c',
-  'backends/meta-crtc-mode.h',
-  'backends/meta-crtc.c',
-  'backends/meta-crtc.h',
-  'backends/meta-cursor.c',
-  'backends/meta-cursor.h',
-  'backends/meta-cursor-renderer.c',
-  'backends/meta-cursor-renderer.h',
-  'backends/meta-cursor-sprite-xcursor.c',
-  'backends/meta-cursor-sprite-xcursor.h',
-  'backends/meta-cursor-tracker.c',
-  'backends/meta-cursor-tracker-private.h',
-  'backends/meta-dbus-session-manager.c',
-  'backends/meta-dbus-session-manager.h',
-  'backends/meta-dbus-session-watcher.c',
-  'backends/meta-dbus-session-watcher.h',
-  'backends/meta-display-config-shared.h',
-  'backends/meta-dnd-private.h',
-  'backends/meta-fd-source.c',
-  'backends/meta-fd-source.h',
-  'backends/meta-gpu.c',
-  'backends/meta-gpu.h',
-  'backends/meta-idle-monitor.c',
-  'backends/meta-idle-manager.c',
-  'backends/meta-idle-manager.h',
-  'backends/meta-idle-monitor-private.h',
-  'backends/meta-input-capture.c',
-  'backends/meta-input-capture.h',
-  'backends/meta-input-capture-session.c',
-  'backends/meta-input-capture-session.h',
-  'backends/meta-input-device.c',
-  'backends/meta-input-mapper.c',
-  'backends/meta-input-mapper-private.h',
-  'backends/meta-input-settings.c',
-  'backends/meta-input-settings-private.h',
-  'backends/meta-input-settings-dummy.c',
-  'backends/meta-input-settings-dummy.h',
-  'backends/meta-keymap-utils.c',
-  'backends/meta-keymap-utils.h',
-  'backends/meta-logical-monitor.c',
-  'backends/meta-logical-monitor.h',
-  'backends/meta-monitor.c',
-  'backends/meta-monitor-config-manager.c',
-  'backends/meta-monitor-config-manager.h',
-  'backends/meta-monitor-config-migration.c',
-  'backends/meta-monitor-config-migration.h',
-  'backends/meta-monitor-config-store.c',
-  'backends/meta-monitor-config-store.h',
-  'backends/meta-monitor.h',
-  'backends/meta-monitor-manager.c',
-  'backends/meta-monitor-manager-dummy.c',
-  'backends/meta-monitor-manager-dummy.h',
-  'backends/meta-monitor-manager-private.h',
-  'backends/meta-monitor-transform.c',
-  'backends/meta-monitor-transform.h',
-  'backends/meta-orientation-manager.c',
-  'backends/meta-orientation-manager.h',
-  'backends/meta-output.c',
-  'backends/meta-output.h',
-  'backends/meta-pointer-constraint.c',
-  'backends/meta-pointer-constraint.h',
-  'backends/meta-remote-access-controller-private.h',
-  'backends/meta-remote-access-controller.c',
-  'backends/meta-renderer.c',
-  'backends/meta-renderer.h',
-  'backends/meta-renderer-view.c',
-  'backends/meta-renderer-view.h',
-  'backends/meta-screen-cast-window.c',
-  'backends/meta-screen-cast-window.h',
-  'backends/meta-settings.c',
-  'backends/meta-settings-private.h',
-  'backends/meta-stage.c',
-  'backends/meta-stage-impl.c',
-  'backends/meta-stage-impl-private.h',
-  'backends/meta-stage-private.h',
-  'backends/meta-stage-view.c',
-  'backends/meta-stage-view-private.h',
-  'backends/meta-viewport-info.c',
-  'backends/meta-viewport-info.h',
-  'backends/meta-virtual-monitor.c',
-  'backends/meta-virtual-monitor.h',
-  'compositor/clutter-utils.c',
-  'compositor/clutter-utils.h',
-  'compositor/cogl-utils.c',
-  'compositor/cogl-utils.h',
-  'compositor/compositor.c',
-  'compositor/compositor-private.h',
-  'compositor/edge-resistance.c',
-  'compositor/edge-resistance.h',
-  'compositor/meta-background-actor.c',
-  'compositor/meta-background-actor-private.h',
-  'compositor/meta-background-content.c',
-  'compositor/meta-background-content-private.h',
-  'compositor/meta-background.c',
-  'compositor/meta-background-group.c',
-  'compositor/meta-background-image.c',
-  'compositor/meta-background-private.h',
-  'compositor/meta-compositor-server.c',
-  'compositor/meta-compositor-server.h',
-  'compositor/meta-compositor-view.c',
-  'compositor/meta-compositor-view.h',
-  'compositor/meta-cullable.c',
-  'compositor/meta-cullable.h',
-  'compositor/meta-dnd-actor.c',
-  'compositor/meta-dnd-actor-private.h',
-  'compositor/meta-dnd.c',
-  'compositor/meta-feedback-actor.c',
-  'compositor/meta-feedback-actor-private.h',
-  'compositor/meta-later.c',
-  'compositor/meta-module.c',
-  'compositor/meta-module.h',
-  'compositor/meta-multi-texture.c',
-  'compositor/meta-multi-texture-format.c',
-  'compositor/meta-multi-texture-format-private.h',
-  'compositor/meta-plugin.c',
-  'compositor/meta-plugin-manager.c',
-  'compositor/meta-plugin-manager.h',
-  'compositor/meta-shadow-factory.c',
-  'compositor/meta-shaped-texture.c',
-  'compositor/meta-shaped-texture-private.h',
-  'compositor/meta-surface-actor.c',
-  'compositor/meta-surface-actor.h',
-  'compositor/meta-texture-mipmap.c',
-  'compositor/meta-texture-mipmap.h',
-  'compositor/meta-window-actor.c',
-  'compositor/meta-window-actor-private.h',
-  'compositor/meta-window-drag.c',
-  'compositor/meta-window-drag.h',
-  'compositor/meta-window-group.c',
-  'compositor/meta-window-group-private.h',
-  'compositor/meta-window-shape.c',
-  'compositor/region-utils.c',
-  'compositor/region-utils.h',
-  'core/bell.c',
-  'core/bell.h',
-  'core/boxes.c',
-  'core/boxes-private.h',
-  'core/constraints.c',
-  'core/constraints.h',
-  'core/delete.c',
-  'core/display.c',
-  'core/display-private.h',
-  'core/events.c',
-  'core/events.h',
-  'core/frame.c',
-  'core/frame.h',
-  'core/keybindings.c',
-  'core/keybindings-private.h',
-  'core/meta-accel-parse.c',
-  'core/meta-accel-parse.h',
-  'core/meta-anonymous-file.c',
-  'core/meta-anonymous-file.h',
-  'core/meta-border.c',
-  'core/meta-border.h',
-  'core/meta-clipboard-manager.c',
-  'core/meta-clipboard-manager.h',
-  'core/meta-close-dialog.c',
-  'core/meta-context-main.c',
-  'core/meta-context-main.h',
-  'core/meta-context-private.h',
-  'core/meta-context.c',
-  'core/meta-fraction.c',
-  'core/meta-fraction.h',
-  'core/meta-gesture-tracker.c',
-  'core/meta-gesture-tracker-private.h',
-  'core/meta-inhibit-shortcuts-dialog.c',
-  'core/meta-inhibit-shortcuts-dialog-default.c',
-  'core/meta-inhibit-shortcuts-dialog-default-private.h',
-  'core/meta-launch-context.c',
-  'core/meta-pad-action-mapper.c',
-  'core/meta-private-enums.h',
-  'core/meta-selection.c',
-  'core/meta-selection-source.c',
-  'core/meta-selection-source-memory.c',
-  'core/meta-sound-player.c',
-  'core/meta-workspace-manager.c',
-  'core/meta-workspace-manager-private.h',
-  'core/place.c',
-  'core/place.h',
-  'core/prefs-private.h',
-  'core/prefs.c',
-  'core/restart.c',
-  'core/stack.c',
-  'core/stack.h',
-  'core/stack-tracker.c',
-  'core/stack-tracker.h',
-  'core/startup-notification.c',
-  'core/startup-notification-private.h',
-  'core/util.c',
-  'core/util-private.h',
-  'core/window.c',
-  'core/window-private.h',
-  'core/workspace.c',
-  'core/workspace-private.h',
-]
-
-if have_x11
-  mutter_sources += [
-    'backends/x11/cm/meta-backend-x11-cm.c',
-    'backends/x11/cm/meta-backend-x11-cm.h',
-    'backends/x11/cm/meta-cursor-sprite-xfixes.c',
-    'backends/x11/cm/meta-cursor-sprite-xfixes.h',
-    'backends/x11/cm/meta-renderer-x11-cm.c',
-    'backends/x11/cm/meta-renderer-x11-cm.h',
-    'backends/x11/meta-backend-x11.c',
-    'backends/x11/meta-backend-x11.h',
-    'backends/x11/meta-barrier-x11.c',
-    'backends/x11/meta-barrier-x11.h',
-    'backends/x11/meta-clutter-backend-x11.c',
-    'backends/x11/meta-clutter-backend-x11.h',
-    'backends/x11/meta-color-manager-x11.c',
-    'backends/x11/meta-color-manager-x11.h',
-    'backends/x11/meta-crtc-xrandr.c',
-    'backends/x11/meta-crtc-xrandr.h',
-    'backends/x11/meta-cursor-renderer-x11.c',
-    'backends/x11/meta-cursor-renderer-x11.h',
-    'backends/x11/meta-cursor-tracker-x11.c',
-    'backends/x11/meta-cursor-tracker-x11.h',
-    'backends/x11/meta-event-x11.c',
-    'backends/x11/meta-event-x11.h',
-    'backends/x11/meta-gpu-xrandr.c',
-    'backends/x11/meta-gpu-xrandr.h',
-    'backends/x11/meta-input-device-x11.c',
-    'backends/x11/meta-input-device-x11.h',
-    'backends/x11/meta-input-device-tool-x11.c',
-    'backends/x11/meta-input-device-tool-x11.h',
-    'backends/x11/meta-input-settings-x11.c',
-    'backends/x11/meta-input-settings-x11.h',
-    'backends/x11/meta-seat-x11.c',
-    'backends/x11/meta-seat-x11.h',
-    'backends/x11/meta-keymap-x11.c',
-    'backends/x11/meta-keymap-x11.h',
-    'backends/x11/meta-monitor-manager-xrandr.c',
-    'backends/x11/meta-monitor-manager-xrandr.h',
-    'backends/x11/meta-output-xrandr.c',
-    'backends/x11/meta-output-xrandr.h',
-    'backends/x11/meta-renderer-x11.c',
-    'backends/x11/meta-renderer-x11.h',
-    'backends/x11/meta-stage-x11.c',
-    'backends/x11/meta-stage-x11.h',
-    'backends/x11/meta-virtual-input-device-x11.c',
-    'backends/x11/meta-virtual-input-device-x11.h',
-    'backends/x11/meta-xkb-a11y-x11.c',
-    'backends/x11/meta-xkb-a11y-x11.h',
-    'backends/x11/nested/meta-backend-x11-nested.c',
-    'backends/x11/nested/meta-backend-x11-nested.h',
-    'backends/x11/nested/meta-cursor-renderer-x11-nested.c',
-    'backends/x11/nested/meta-cursor-renderer-x11-nested.h',
-    'backends/x11/nested/meta-stage-x11-nested.c',
-    'backends/x11/nested/meta-stage-x11-nested.h',
-    'backends/x11/nested/meta-renderer-x11-nested.c',
-    'backends/x11/nested/meta-renderer-x11-nested.h',
-  ]
-endif
-
-if have_x11_client
-  mutter_sources += [
-    'compositor/meta-compositor-x11.c',
-    'compositor/meta-compositor-x11.h',
-    'compositor/meta-surface-actor-x11.c',
-    'compositor/meta-surface-actor-x11.h',
-    'compositor/meta-sync-ring.c',
-    'compositor/meta-sync-ring.h',
-    'compositor/meta-window-actor-x11.c',
-    'compositor/meta-window-actor-x11.h',
-    'x11/atomnames.h',
-    'x11/events.c',
-    'x11/events.h',
-    'x11/group.c',
-    'x11/group-private.h',
-    'x11/group-props.c',
-    'x11/group-props.h',
-    'x11/iconcache.c',
-    'x11/iconcache.h',
-    'x11/meta-selection-source-x11.c',
-    'x11/meta-selection-source-x11-private.h',
-    'x11/meta-startup-notification-x11.c',
-    'x11/meta-startup-notification-x11.h',
-    'x11/meta-sync-counter.c',
-    'x11/meta-sync-counter.h',
-    'x11/meta-x11-display.c',
-    'x11/meta-x11-display-private.h',
-    'x11/meta-x11-errors.c',
-    'x11/meta-x11-event-source.c',
-    'x11/meta-x11-selection.c',
-    'x11/meta-x11-selection-private.h',
-    'x11/meta-x11-selection-input-stream.c',
-    'x11/meta-x11-selection-input-stream-private.h',
-    'x11/meta-x11-selection-output-stream.c',
-    'x11/meta-x11-selection-output-stream-private.h',
-    'x11/meta-x11-stack.c',
-    'x11/meta-x11-stack-private.h',
-    'x11/mutter-Xatomtype.h',
-    'x11/session.c',
-    'x11/session.h',
-    'x11/window-props.c',
-    'x11/window-props.h',
-    'x11/window-x11.c',
-    'x11/window-x11.h',
-    'x11/window-x11-private.h',
-    'x11/xprops.c',
-    'x11/xprops.h',
-  ]
-endif
-
-
-if have_egl_device
-  mutter_sources += [
-    'backends/native/meta-render-device-egl-stream.c',
-    'backends/native/meta-render-device-egl-stream.h',
-  ]
-endif
-
-if have_egl
-  mutter_sources += [
-    'backends/meta-egl.c',
-    'backends/meta-egl-ext.h',
-    'backends/meta-egl.h',
-  ]
-endif
-
-if have_gles2
-  mutter_sources += [
-    'backends/meta-gles3.c',
-    'backends/meta-gles3.h',
-    'backends/meta-gles3-table.h',
-  ]
-endif
-
-if have_remote_desktop
-  mutter_sources += [
-    'backends/meta-eis.c',
-    'backends/meta-eis.h',
-    'backends/meta-eis-client.c',
-    'backends/meta-eis-client.h',
-    'backends/meta-eis-viewport.c',
-    'backends/meta-eis-viewport.h',
-    'backends/meta-remote-desktop.c',
-    'backends/meta-remote-desktop.h',
-    'backends/meta-remote-desktop-session.c',
-    'backends/meta-remote-desktop-session.h',
-    'backends/meta-screen-cast.c',
-    'backends/meta-screen-cast.h',
-    'backends/meta-screen-cast-area-stream.c',
-    'backends/meta-screen-cast-area-stream.h',
-    'backends/meta-screen-cast-area-stream-src.c',
-    'backends/meta-screen-cast-area-stream-src.h',
-    'backends/meta-screen-cast-monitor-stream.c',
-    'backends/meta-screen-cast-monitor-stream.h',
-    'backends/meta-screen-cast-monitor-stream-src.c',
-    'backends/meta-screen-cast-monitor-stream-src.h',
-    'backends/meta-screen-cast-virtual-stream-src.c',
-    'backends/meta-screen-cast-virtual-stream-src.h',
-    'backends/meta-screen-cast-virtual-stream.c',
-    'backends/meta-screen-cast-virtual-stream.h',
-    'backends/meta-screen-cast-window-stream-src.c',
-    'backends/meta-screen-cast-window-stream-src.h',
-    'backends/meta-screen-cast-window-stream.c',
-    'backends/meta-screen-cast-window-stream.h',
-    'backends/meta-screen-cast-session.c',
-    'backends/meta-screen-cast-session.h',
-    'backends/meta-screen-cast-stream.c',
-    'backends/meta-screen-cast-stream.h',
-    'backends/meta-screen-cast-stream-src.c',
-    'backends/meta-screen-cast-stream-src.h',
-    'core/meta-selection-source-remote.c',
-    'core/meta-selection-source-remote.h',
-  ]
-endif
-
-if have_wayland
-  mutter_sources += [
-    'compositor/meta-surface-actor-wayland.c',
-    'compositor/meta-surface-actor-wayland.h',
-    'compositor/meta-window-actor-wayland.c',
-    'compositor/meta-window-actor-wayland.h',
-    'core/meta-service-channel.c',
-    'core/meta-service-channel.h',
-    'wayland/meta-cursor-sprite-wayland.c',
-    'wayland/meta-cursor-sprite-wayland.h',
-    'wayland/meta-pointer-confinement-wayland.c',
-    'wayland/meta-pointer-confinement-wayland.h',
-    'wayland/meta-pointer-lock-wayland.c',
-    'wayland/meta-pointer-lock-wayland.h',
-    'wayland/meta-selection-source-wayland.c',
-    'wayland/meta-selection-source-wayland-private.h',
-    'wayland/meta-wayland-activation.c',
-    'wayland/meta-wayland-activation.h',
-    'wayland/meta-wayland-actor-surface.c',
-    'wayland/meta-wayland-actor-surface.h',
-    'wayland/meta-wayland-buffer.c',
-    'wayland/meta-wayland-buffer.h',
-    'wayland/meta-wayland.c',
-    'wayland/meta-wayland-client.c',
-    'wayland/meta-wayland-client-private.h',
-    'wayland/meta-wayland-cursor-surface.c',
-    'wayland/meta-wayland-cursor-surface.h',
-    'wayland/meta-wayland-data-device.c',
-    'wayland/meta-wayland-data-device.h',
-    'wayland/meta-wayland-data-device-primary.c',
-    'wayland/meta-wayland-data-device-primary.h',
-    'wayland/meta-wayland-data-offer.c',
-    'wayland/meta-wayland-data-offer.h',
-    'wayland/meta-wayland-data-offer-primary.c',
-    'wayland/meta-wayland-data-offer-primary.h',
-    'wayland/meta-wayland-data-source.c',
-    'wayland/meta-wayland-data-source.h',
-    'wayland/meta-wayland-data-source-primary.c',
-    'wayland/meta-wayland-data-source-primary.h',
-    'wayland/meta-wayland-dma-buf.c',
-    'wayland/meta-wayland-dma-buf.h',
-    'wayland/meta-wayland-dnd-surface.c',
-    'wayland/meta-wayland-dnd-surface.h',
-    'wayland/meta-wayland-filter-manager.c',
-    'wayland/meta-wayland-filter-manager.h',
-    'wayland/meta-wayland-fractional-scale.c',
-    'wayland/meta-wayland-fractional-scale.h',
-    'wayland/meta-wayland-gtk-shell.c',
-    'wayland/meta-wayland-gtk-shell.h',
-    'wayland/meta-wayland.h',
-    'wayland/meta-wayland-idle-inhibit.c',
-    'wayland/meta-wayland-idle-inhibit.h',
-    'wayland/meta-wayland-inhibit-shortcuts.c',
-    'wayland/meta-wayland-inhibit-shortcuts-dialog.c',
-    'wayland/meta-wayland-inhibit-shortcuts-dialog.h',
-    'wayland/meta-wayland-inhibit-shortcuts.h',
-    'wayland/meta-wayland-input-device.c',
-    'wayland/meta-wayland-input-device.h',
-    'wayland/meta-wayland-keyboard.c',
-    'wayland/meta-wayland-keyboard.h',
-    'wayland/meta-wayland-legacy-xdg-foreign.c',
-    'wayland/meta-wayland-legacy-xdg-foreign.h',
-    'wayland/meta-wayland-outputs.c',
-    'wayland/meta-wayland-outputs.h',
-    'wayland/meta-wayland-pointer.c',
-    'wayland/meta-wayland-pointer-constraints.c',
-    'wayland/meta-wayland-pointer-constraints.h',
-    'wayland/meta-wayland-pointer-gesture-hold.c',
-    'wayland/meta-wayland-pointer-gesture-hold.h',
-    'wayland/meta-wayland-pointer-gesture-pinch.c',
-    'wayland/meta-wayland-pointer-gesture-pinch.h',
-    'wayland/meta-wayland-pointer-gestures.c',
-    'wayland/meta-wayland-pointer-gestures.h',
-    'wayland/meta-wayland-pointer-gesture-swipe.c',
-    'wayland/meta-wayland-pointer-gesture-swipe.h',
-    'wayland/meta-wayland-pointer.h',
-    'wayland/meta-wayland-popup.c',
-    'wayland/meta-wayland-popup.h',
-    'wayland/meta-wayland-presentation-time.c',
-    'wayland/meta-wayland-presentation-time-private.h',
-    'wayland/meta-wayland-private.h',
-    'wayland/meta-wayland-region.c',
-    'wayland/meta-wayland-region.h',
-    'wayland/meta-wayland-seat.c',
-    'wayland/meta-wayland-seat.h',
-    'wayland/meta-wayland-shell-surface.c',
-    'wayland/meta-wayland-shell-surface.h',
-    'wayland/meta-wayland-single-pixel-buffer.c',
-    'wayland/meta-wayland-single-pixel-buffer.h',
-    'wayland/meta-wayland-subsurface.c',
-    'wayland/meta-wayland-subsurface.h',
-    'wayland/meta-wayland-surface.c',
-    'wayland/meta-wayland-surface.h',
-    'wayland/meta-wayland-tablet.c',
-    'wayland/meta-wayland-tablet-cursor-surface.c',
-    'wayland/meta-wayland-tablet-cursor-surface.h',
-    'wayland/meta-wayland-tablet.h',
-    'wayland/meta-wayland-tablet-manager.c',
-    'wayland/meta-wayland-tablet-manager.h',
-    'wayland/meta-wayland-tablet-pad.c',
-    'wayland/meta-wayland-tablet-pad-group.c',
-    'wayland/meta-wayland-tablet-pad-group.h',
-    'wayland/meta-wayland-tablet-pad.h',
-    'wayland/meta-wayland-tablet-pad-ring.c',
-    'wayland/meta-wayland-tablet-pad-ring.h',
-    'wayland/meta-wayland-tablet-pad-strip.c',
-    'wayland/meta-wayland-tablet-pad-strip.h',
-    'wayland/meta-wayland-tablet-seat.c',
-    'wayland/meta-wayland-tablet-seat.h',
-    'wayland/meta-wayland-tablet-tool.c',
-    'wayland/meta-wayland-tablet-tool.h',
-    'wayland/meta-wayland-text-input.c',
-    'wayland/meta-wayland-text-input.h',
-    'wayland/meta-wayland-touch.c',
-    'wayland/meta-wayland-touch.h',
-    'wayland/meta-wayland-transaction.c',
-    'wayland/meta-wayland-transaction.h',
-    'wayland/meta-wayland-types.h',
-    'wayland/meta-wayland-versions.h',
-    'wayland/meta-wayland-viewporter.c',
-    'wayland/meta-wayland-viewporter.h',
-    'wayland/meta-wayland-window-configuration.c',
-    'wayland/meta-wayland-window-configuration.h',
-    'wayland/meta-wayland-xdg-foreign.c',
-    'wayland/meta-wayland-xdg-foreign.h',
-    'wayland/meta-wayland-xdg-foreign-private.h',
-    'wayland/meta-wayland-xdg-shell.c',
-    'wayland/meta-wayland-xdg-shell.h',
-    'wayland/meta-window-wayland.c',
-    'wayland/meta-window-wayland.h',
-  ]
-
-  if have_xwayland
-    mutter_sources += [
-      'wayland/meta-wayland-x11-interop.c',
-      'wayland/meta-wayland-x11-interop.h',
-      'wayland/meta-window-xwayland.c',
-      'wayland/meta-window-xwayland.h',
-      'wayland/meta-xwayland.c',
-      'wayland/meta-xwayland-grab-keyboard.c',
-      'wayland/meta-xwayland-grab-keyboard.h',
-      'wayland/meta-xwayland.h',
-      'wayland/meta-xwayland-private.h',
-      'wayland/meta-xwayland-dnd.c',
-      'wayland/meta-xwayland-dnd-private.h',
-      'wayland/meta-xwayland-surface.c',
-      'wayland/meta-xwayland-surface.h',
-    ]
-  endif
-endif
-
-if have_native_backend
-  mutter_sources += [
-    'backends/native/dbus-utils.c',
-    'backends/native/dbus-utils.h',
-    'backends/native/meta-backend-native.c',
-    'backends/native/meta-backend-native.h',
-    'backends/native/meta-backend-native-private.h',
-    'backends/native/meta-backend-native-types.h',
-    'backends/native/meta-barrier-native.c',
-    'backends/native/meta-barrier-native.h',
-    'backends/native/meta-clutter-backend-native.c',
-    'backends/native/meta-clutter-backend-native.h',
-    'backends/native/meta-crtc-kms.c',
-    'backends/native/meta-crtc-kms.h',
-    'backends/native/meta-crtc-native.c',
-    'backends/native/meta-crtc-native.h',
-    'backends/native/meta-crtc-mode-kms.c',
-    'backends/native/meta-crtc-mode-kms.h',
-    'backends/native/meta-crtc-mode-virtual.c',
-    'backends/native/meta-crtc-mode-virtual.h',
-    'backends/native/meta-crtc-virtual.c',
-    'backends/native/meta-crtc-virtual.h',
-    'backends/native/meta-cursor-renderer-native.c',
-    'backends/native/meta-cursor-renderer-native.h',
-    'backends/native/meta-device-pool-private.h',
-    'backends/native/meta-device-pool.c',
-    'backends/native/meta-device-pool.h',
-    'backends/native/meta-drm-buffer-dumb.c',
-    'backends/native/meta-drm-buffer-dumb.h',
-    'backends/native/meta-drm-buffer-gbm.c',
-    'backends/native/meta-drm-buffer-gbm.h',
-    'backends/native/meta-drm-buffer-import.c',
-    'backends/native/meta-drm-buffer-import.h',
-    'backends/native/meta-drm-buffer-private.h',
-    'backends/native/meta-drm-buffer.c',
-    'backends/native/meta-drm-buffer.h',
-    'backends/native/meta-gpu-kms.c',
-    'backends/native/meta-gpu-kms.h',
-    'backends/native/meta-frame-native.c',
-    'backends/native/meta-frame-native.h',
-    'backends/native/meta-input-device-native.c',
-    'backends/native/meta-input-device-native.h',
-    'backends/native/meta-input-device-tool-native.c',
-    'backends/native/meta-input-device-tool-native.h',
-    'backends/native/meta-input-settings-native.c',
-    'backends/native/meta-input-settings-native.h',
-    'backends/native/meta-keymap-native.c',
-    'backends/native/meta-keymap-native.h',
-    'backends/native/meta-launcher.c',
-    'backends/native/meta-launcher.h',
-    'backends/native/meta-monitor-manager-native.c',
-    'backends/native/meta-monitor-manager-native.h',
-    'backends/native/meta-output-kms.c',
-    'backends/native/meta-output-kms.h',
-    'backends/native/meta-output-native.c',
-    'backends/native/meta-output-native.h',
-    'backends/native/meta-output-virtual.c',
-    'backends/native/meta-output-virtual.h',
-    'backends/native/meta-kms-connector-private.h',
-    'backends/native/meta-kms-connector.c',
-    'backends/native/meta-kms-connector.h',
-    'backends/native/meta-kms-crtc-private.h',
-    'backends/native/meta-kms-crtc.c',
-    'backends/native/meta-kms-crtc.h',
-    'backends/native/meta-kms-cursor-manager.c',
-    'backends/native/meta-kms-cursor-manager.h',
-    'backends/native/meta-kms-device-private.h',
-    'backends/native/meta-kms-device.c',
-    'backends/native/meta-kms-device.h',
-    'backends/native/meta-kms-impl-device-atomic.c',
-    'backends/native/meta-kms-impl-device-atomic.h',
-    'backends/native/meta-kms-impl-device-dummy.c',
-    'backends/native/meta-kms-impl-device-dummy.h',
-    'backends/native/meta-kms-impl-device-simple.c',
-    'backends/native/meta-kms-impl-device-simple.h',
-    'backends/native/meta-kms-impl-device.c',
-    'backends/native/meta-kms-impl-device.h',
-    'backends/native/meta-kms-impl.c',
-    'backends/native/meta-kms-impl.h',
-    'backends/native/meta-kms-mode.c',
-    'backends/native/meta-kms-mode.h',
-    'backends/native/meta-kms-page-flip.c',
-    'backends/native/meta-kms-page-flip-private.h',
-    'backends/native/meta-kms-plane.c',
-    'backends/native/meta-kms-plane-private.h',
-    'backends/native/meta-kms-plane.h',
-    'backends/native/meta-kms-private.h',
-    'backends/native/meta-kms-types-private.h',
-    'backends/native/meta-kms-types.h',
-    'backends/native/meta-kms-update-private.h',
-    'backends/native/meta-kms-update.c',
-    'backends/native/meta-kms-update.h',
-    'backends/native/meta-kms-utils.c',
-    'backends/native/meta-kms-utils.h',
-    'backends/native/meta-kms.c',
-    'backends/native/meta-kms.h',
-    'backends/native/meta-onscreen-native.c',
-    'backends/native/meta-onscreen-native.h',
-    'backends/native/meta-pointer-constraint-native.c',
-    'backends/native/meta-pointer-constraint-native.h',
-    'backends/native/meta-render-device-gbm.c',
-    'backends/native/meta-render-device-gbm.h',
-    'backends/native/meta-render-device-private.h',
-    'backends/native/meta-render-device-surfaceless.c',
-    'backends/native/meta-render-device-surfaceless.h',
-    'backends/native/meta-render-device.c',
-    'backends/native/meta-render-device.h',
-    'backends/native/meta-renderer-native-gles3.c',
-    'backends/native/meta-renderer-native-gles3.h',
-    'backends/native/meta-renderer-native-private.h',
-    'backends/native/meta-renderer-native.c',
-    'backends/native/meta-renderer-native.h',
-    'backends/native/meta-renderer-view-native.c',
-    'backends/native/meta-renderer-view-native.h',
-    'backends/native/meta-seat-impl.c',
-    'backends/native/meta-seat-impl.h',
-    'backends/native/meta-seat-native.c',
-    'backends/native/meta-seat-native.h',
-    'backends/native/meta-stage-native.c',
-    'backends/native/meta-stage-native.h',
-    'backends/native/meta-thread-impl.c',
-    'backends/native/meta-thread-impl.h',
-    'backends/native/meta-thread-private.h',
-    'backends/native/meta-thread.c',
-    'backends/native/meta-thread.h',
-    'backends/native/meta-thread-private.h',
-    'backends/native/meta-udev.c',
-    'backends/native/meta-udev.h',
-    'backends/native/meta-virtual-input-device-native.c',
-    'backends/native/meta-virtual-input-device-native.h',
-    'backends/native/meta-virtual-monitor-native.c',
-    'backends/native/meta-virtual-monitor-native.h',
-    'backends/native/meta-xkb-utils.c',
-    'backends/native/meta-xkb-utils.h',
-    'compositor/meta-compositor-native.c',
-    'compositor/meta-compositor-native.h',
-    'compositor/meta-compositor-view-native.c',
-    'compositor/meta-compositor-view-native.h',
-  ]
-endif
-
-if have_wayland or have_native_backend
-  mutter_sources += [
-    'common/meta-cogl-drm-formats.c',
-    'common/meta-cogl-drm-formats.h',
-  ]
-endif
-
-if have_wayland_eglstream
-  mutter_sources += [
-    'wayland/meta-wayland-egl-stream.c',
-    'wayland/meta-wayland-egl-stream.h',
-  ]
-endif
-
-mutter_private_enum_sources = [
-  'core/window-private.h',
-]
-
-if have_remote_desktop
-  mutter_private_enum_sources += [
-    'backends/meta-screen-cast.h',
-    'backends/meta-screen-cast-session.h',
-  ]
-endif
-
-if have_native_backend
-  mutter_private_enum_sources += [
-    'backends/native/meta-backend-native-types.h',
-    'backends/native/meta-drm-buffer.h',
-    'backends/native/meta-kms-types.h',
-    'backends/native/meta-thread.h',
-  ]
-endif
-
-mutter_built_sources = []
-
-if mutter_private_enum_sources.length() > 0
-  mutter_private_enum_types = gnome.mkenums('meta-private-enum-types',
-    sources: mutter_private_enum_sources,
-    c_template: 'meta-private-enum-types.c.in',
-    h_template: 'meta-private-enum-types.h.in',
-  )
-
-  mutter_built_sources += mutter_private_enum_types
-endif
-
-dbus_interfaces = [
-  {
-    'name': 'meta-dbus-display-config',
-    'interface': 'org.gnome.Mutter.DisplayConfig.xml',
-    'prefix': 'org.gnome.Mutter.',
-  },
-  {
-    'name': 'meta-dbus-idle-monitor',
-    'interface': 'org.gnome.Mutter.IdleMonitor.xml',
-    'prefix': 'org.gnome.Mutter.',
-    'object_manager': true,
-  },
-  {
-    'name': 'meta-dbus-input-mapping',
-    'interface': 'org.gnome.Mutter.InputMapping.xml',
-    'prefix': 'org.gnome.Mutter.',
-  },
-  {
-    'name': 'meta-dbus-service-channel',
-    'interface': 'org.gnome.Mutter.ServiceChannel.xml',
-    'prefix': 'org.gnome.Mutter.',
-  },
-]
-
-if have_profiler
-  mutter_sources += [
-    'core/meta-profiler.c',
-    'core/meta-profiler.h',
-  ]
-
-  dbus_interfaces += [
-    {
-      'name': 'meta-dbus-sysprof3-profiler',
-      'interface': 'org.gnome.Sysprof3.Profiler.xml',
-      'prefix': 'org.gnome.',
-      'directory': sysprof_dbus_interfaces_dir,
-    },
-  ]
-endif
-
-if have_native_backend
-  cvt = find_program('cvt')
-
-  gen_default_modes = find_program('backends/native/gen-default-modes.py')
-  default_modes_h = custom_target('meta-default-modes',
-    output: 'meta-default-modes.h',
-    command: [gen_default_modes, '@OUTPUT@']
-  )
-  mutter_built_sources += default_modes_h
-
-  dbus_interfaces += [
-    {
-      'name': 'meta-dbus-login1',
-      'interface': 'org.freedesktop.login1.xml',
-      'prefix': 'org.freedesktop.',
-    },
-  ]
-endif
-
-if have_remote_desktop
-  dbus_interfaces += [
-    {
-      'name': 'meta-dbus-remote-desktop',
-      'interface': 'org.gnome.Mutter.RemoteDesktop.xml',
-      'prefix': 'org.gnome.Mutter.',
-    },
-    {
-      'name': 'meta-dbus-screen-cast',
-      'interface': 'org.gnome.Mutter.ScreenCast.xml',
-      'prefix': 'org.gnome.Mutter.',
-    },
-  ]
-endif
-
-dbus_interfaces += [
-  {
-    'name': 'meta-dbus-rtkit1',
-    'interface': 'org.freedesktop.RealtimeKit1.xml',
-    'prefix': 'org.freedesktop.',
-  },
-  {
-    'name': 'meta-dbus-gsd-color',
-    'interface': 'org.gnome.SettingsDaemon.Color.xml',
-    'prefix': 'org.gnome.',
-  },
-  {
-    'name': 'meta-dbus-gsd-power-screen',
-    'interface': 'org.gnome.SettingsDaemon.Power.Screen.xml',
-    'prefix': 'org.gnome.',
-  },
-]
-
-built_dbus_sources = {}
-
-foreach dbus_interface: dbus_interfaces
-  name = dbus_interface['name']
-
-  interface = dbus_interface['interface']
-  if dbus_interface.has_key('directory')
-    directory = dbus_interface['directory']
-  else
-    directory = dbus_interfaces_dir
-  endif
-  interface_file = directory / interface
-
-  prefix = dbus_interface['prefix']
-
-  if dbus_interface.has_key('object_manager')
-    object_manager = dbus_interface['object_manager']
-  else
-    object_manager = false
-  endif
-
-  dbus_sources = gnome.gdbus_codegen(name, interface_file,
-    interface_prefix: prefix,
-    namespace: 'MetaDBus',
-    object_manager: object_manager,
-  )
-  built_dbus_sources += {
-    name: dbus_sources,
-  }
-  mutter_built_sources += dbus_sources
-endforeach
-
-dbus_input_capture_built_sources = gnome.gdbus_codegen('meta-dbus-input-capture',
-    dbus_interfaces_dir / 'org.gnome.Mutter.InputCapture.xml',
-    interface_prefix: 'org.gnome.Mutter',
-    namespace: 'MetaDBus',
-)
-mutter_built_sources += dbus_input_capture_built_sources
-
-wayland_protocol_server_headers = []
-wayland_protocol_client_headers = []
-wayland_protocol_sources = []
-
-wayland_protocol_files = {}
-
-if have_wayland
-  # Format:
-  #  - protocol name
-  #  - protocol stability ('private', 'stable' or 'unstable')
-  #  - protocol version (if stability is 'unstable')
-  wayland_protocols = [
-    ['fractional-scale', 'staging', 'v1', ],
-    ['gtk-shell', 'private', ],
-    ['idle-inhibit', 'unstable', 'v1', ],
-    ['keyboard-shortcuts-inhibit', 'unstable', 'v1', ],
-    ['linux-dmabuf', 'unstable', 'v1', ],
-    ['pointer-constraints', 'unstable', 'v1', ],
-    ['pointer-gestures', 'unstable', 'v1', ],
-    ['presentation-time', 'stable', ],
-    ['primary-selection', 'unstable', 'v1', ],
-    ['relative-pointer', 'unstable', 'v1', ],
-    ['single-pixel-buffer', 'staging', 'v1', ],
-    ['tablet', 'unstable', 'v2', ],
-    ['text-input', 'unstable', 'v3', ],
-    ['viewporter', 'stable', ],
-    ['xdg-activation', 'staging', 'v1', ],
-    ['xdg-foreign', 'unstable', 'v1', ],
-    ['xdg-foreign', 'unstable', 'v2', ],
-    ['xdg-output', 'unstable', 'v1', ],
-    ['xdg-shell', 'stable', ],
-    ['xwayland-keyboard-grab', 'unstable', 'v1', ],
-  ]
-  if have_wayland_eglstream
-    wayland_eglstream_protocols_dir = wayland_eglstream_protocols_dep.get_variable('pkgdatadir')
-    wayland_protocols += [
-      ['wayland-eglstream-controller', 'third-party', wayland_eglstream_protocols_dir],
-    ]
-  endif
-  if have_xwayland
-    wayland_protocols += [
-      ['mutter-x11-interop', 'private', ],
-    ]
-  endif
-
-  wayland_scanner = find_program('wayland-scanner')
-  protocols_dir = wayland_protocols_dep.get_variable('pkgdatadir')
-  assert(protocols_dir != '', 'Could not get pkgdatadir from wayland-protocols.pc')
-
-  foreach p: wayland_protocols
-    protocol_name = p.get(0)
-    protocol_type = p.get(1)
-
-    if protocol_type == 'stable'
-      output_base = protocol_name
-      input = protocols_dir / protocol_type / protocol_name / '@0@.xml'.format(output_base)
-    elif protocol_type == 'staging'
-      protocol_version = p.get(2)
-      output_base = '@0@-@1@'.format(protocol_name, protocol_version)
-      input = protocols_dir / protocol_type / protocol_name / '@0@.xml'.format(output_base)
-    elif protocol_type == 'private'
-      output_base = protocol_name
-      input = 'wayland/protocol/@0@.xml'.format(protocol_name)
-    elif protocol_type == 'third-party'
-      output_base = protocol_name
-      protocol_dir = p.get(2)
-      input = protocol_dir / '@0@.xml'.format(protocol_name)
-    else
-      protocol_version = p.get(2)
-      output_base = '@0@-@1@-@2@'.format(protocol_name,
-                                         protocol_type,
-                                         protocol_version)
-      input = protocols_dir / protocol_type / protocol_name / '@0@.xml'.format(output_base)
-    endif
-
-    server_header = custom_target('@0@ server header'.format(output_base),
-      input: input,
-      output: '@0@-server-protocol.h'.format(output_base),
-      command: [
-        wayland_scanner,
-        'server-header',
-        '@INPUT@', '@OUTPUT@',
-      ]
-    )
-    client_header = custom_target('@0@ client header'.format(output_base),
-      input: input,
-      output: '@0@-client-protocol.h'.format(output_base),
-      command: [
-        wayland_scanner,
-        'client-header',
-        '@INPUT@', '@OUTPUT@',
-      ]
-    )
-    protocol_code = custom_target('@0@ source'.format(output_base),
-      input: input,
-      output: '@0@-protocol.c'.format(output_base),
-      command: [
-        wayland_scanner,
-        'private-code',
-        '@INPUT@', '@OUTPUT@',
-      ]
-    )
-
-    wayland_protocol_files += {
-      protocol_name: {
-        'server-header': server_header,
-        'client-header': client_header,
-        'protocol-code': protocol_code,
-      },
-    }
-
-    wayland_protocol_server_headers += server_header
-    wayland_protocol_client_headers += client_header
-    wayland_protocol_sources += protocol_code
-  endforeach
-endif
-
-mutter_built_sources += wayland_protocol_server_headers
-mutter_built_sources += wayland_protocol_sources
-
-subdir('meta')
-
-mutter_built_sources += mutter_enum_types
-
-mutter_built_headers = []
-foreach built_source : mutter_built_sources
-  if built_source.full_path().endswith('.h')
-    mutter_built_headers += [built_source]
-  endif
-endforeach
-
-libmutter = shared_library(libmutter_name,
-  mutter_sources,
-  mutter_built_sources,
-  version: '0.0.0',
-  soversion: 0,
-  gnu_symbol_visibility: 'hidden',
-  include_directories: mutter_includes,
-  c_args: [
-    mutter_c_args,
-    '-DG_LOG_DOMAIN="libmutter"',
-  ],
-  dependencies: [
-    libmutter_cogl_dep,
-    libmutter_clutter_dep,
-    mutter_deps,
-  ],
-  install_rpath: pkglibdir,
-  install_dir: libdir,
-  install: true,
-)
-
-libmutter_dep = declare_dependency(
-  link_with: libmutter,
-  include_directories: mutter_includes,
-  sources: mutter_built_headers,
-  dependencies: [
-    libmutter_cogl_dep,
-    libmutter_clutter_dep,
-    mutter_deps,
-  ],
-)
-
-mutter = executable('mutter',
-  sources: [
-    files('core/mutter.c'),
-  ],
-  include_directories: mutter_includes,
-  c_args: [
-    mutter_c_args,
-    '-DG_LOG_DOMAIN="mutter"',
-  ],
-  dependencies: [libmutter_dep],
-  install_dir: bindir,
-  install: true,
-)
-if have_x11
-  executable('mutter-restart-helper',
-    sources: [
-      files('core/restart-helper.c'),
-    ],
-    include_directories: [
-      top_includepath,
-    ],
-    c_args: [
-      mutter_c_args,
-      '-DG_LOG_DOMAIN="mutter-restart-helper"',
-    ],
-    dependencies: [
-      x11_dep,
-      xcomposite_dep,
-    ],
-    install_dir: libexecdir,
-    install: true,
-  )
-endif
-
-if have_introspection
-  mutter_introspected_sources = []
-  foreach source : mutter_sources
-    if source.endswith('.c')
-      mutter_introspected_sources += source
-    endif
-  endforeach
-
-  libmutter_gir = gnome.generate_gir(libmutter,
-    sources: [
-      mutter_enum_types[1],
-      mutter_introspected_sources,
-      mutter_public_header_files
-    ],
-    nsversion: libmutter_api_version,
-    namespace: 'Meta',
-    symbol_prefix: 'meta',
-    includes: [
-      'GObject-2.0',
-      'GDesktopEnums-3.0',
-      'xlib-2.0',
-      'xfixes-4.0',
-      libmutter_cogl_gir[0],
-      libmutter_cogl_pango_gir[0],
-      libmutter_clutter_gir[0],
-      libmutter_mtk_gir[0],
-    ],
-    dependencies: [
-      libmutter_dep,
-      mutter_deps,
-    ],
-    export_packages: 'libmutter-@0@'.format(libmutter_api_version),
-    extra_args: mutter_c_args + introspection_args,
-    install_dir_gir: pkglibdir,
-    install_dir_typelib: pkglibdir,
-    install: true
-  )
-endif
-
-pkg.generate(libmutter,
-  name: 'Meta',
-  filebase: 'libmutter-' + libmutter_api_version,
-  description: 'Mutter compositor and window manager library',
-  subdirs: pkgname,
-  requires: [mutter_pkg_deps, libmutter_clutter_name],
-  version: meson.project_version(),
-  variables: [
-    'apiversion=' + libmutter_api_version,
-    'girdir=${libdir}/mutter-' + libmutter_api_version,
-    'typelibdir=${libdir}/mutter-' + libmutter_api_version,
-  ],
-  install_dir: pcdir,
-)
-
-subdir('compositor/plugins')
-if have_x11_client
-  subdir('frames')
-endif
-
-if have_core_tests
-  subdir('tests')
-endif
diff '--color=auto' -ruN a/src/tests/meta-monitor-test-utils.c b/src/tests/meta-monitor-test-utils.c
--- a/src/tests/meta-monitor-test-utils.c	2023-09-16 23:51:03.000000000 +0300
+++ b/src/tests/meta-monitor-test-utils.c	2023-10-07 22:05:39.841763050 +0300
@@ -394,6 +394,10 @@
                            ==,
                            meta_output_is_underscanning (output));
 
+          g_assert_cmpint (expect->monitors[i].is_vrr_disallowed,
+                           ==,
+                           meta_output_is_vrr_disallowed (output));
+
           if (!meta_output_get_max_bpc (output, &output_max_bpc))
             output_max_bpc = 0;
 
@@ -796,6 +800,7 @@
 
           output_assignment = (MetaOutputAssignment) {
             .is_underscanning = setup->outputs[i].is_underscanning,
+            .is_vrr_disallowed = setup->outputs[i].is_vrr_disallowed,
             .has_max_bpc = !!setup->outputs[i].max_bpc,
             .max_bpc = setup->outputs[i].max_bpc,
           };
diff '--color=auto' -ruN a/src/tests/meta-monitor-test-utils.h b/src/tests/meta-monitor-test-utils.h
--- a/src/tests/meta-monitor-test-utils.h	2023-09-16 23:51:03.000000000 +0300
+++ b/src/tests/meta-monitor-test-utils.h	2023-10-07 22:05:39.841763050 +0300
@@ -105,6 +105,7 @@
   float scale;
   gboolean is_laptop_panel;
   gboolean is_underscanning;
+  gboolean is_vrr_disallowed;
   unsigned int max_bpc;
   const char *serial;
   MetaMonitorTransform panel_orientation_transform;
@@ -160,6 +161,7 @@
   int width_mm;
   int height_mm;
   gboolean is_underscanning;
+  gboolean is_vrr_disallowed;
   unsigned int max_bpc;
 } MonitorTestCaseMonitor;
 
diff '--color=auto' -ruN a/src/tests/monitor-configs/vrr-disallowed.xml b/src/tests/monitor-configs/vrr-disallowed.xml
--- a/src/tests/monitor-configs/vrr-disallowed.xml	1970-01-01 02:00:00.000000000 +0200
+++ b/src/tests/monitor-configs/vrr-disallowed.xml	2023-10-07 22:05:39.841763050 +0300
@@ -0,0 +1,23 @@
+<monitors version="2">
+  <configuration>
+    <logicalmonitor>
+      <x>0</x>
+      <y>0</y>
+      <primary>yes</primary>
+      <monitor>
+	<monitorspec>
+	  <connector>DP-1</connector>
+	  <vendor>MetaProduct&apos;s Inc.</vendor>
+	  <product>MetaMonitor</product>
+	  <serial>0x123456</serial>
+	</monitorspec>
+	<mode>
+	  <width>1024</width>
+	  <height>768</height>
+	  <rate>60.000495910644531</rate>
+	</mode>
+	<vrr-allowed>no</vrr-allowed>
+      </monitor>
+    </logicalmonitor>
+  </configuration>
+</monitors>
diff '--color=auto' -ruN a/src/tests/monitor-store-unit-tests.c b/src/tests/monitor-store-unit-tests.c
--- a/src/tests/monitor-store-unit-tests.c	2023-09-16 23:51:03.000000000 +0300
+++ b/src/tests/monitor-store-unit-tests.c	2023-10-07 22:05:39.841763050 +0300
@@ -48,6 +48,7 @@
   const char *serial;
   MonitorStoreTestCaseMonitorMode mode;
   gboolean is_underscanning;
+  gboolean disallow_vrr;
   unsigned int max_bpc;
 } MonitorStoreTestCaseMonitor;
 
@@ -197,6 +198,9 @@
           g_assert_cmpint (monitor_config->enable_underscanning,
                            ==,
                            test_monitor->is_underscanning);
+          g_assert_cmpint (monitor_config->disallow_vrr,
+                           ==,
+                           test_monitor->disallow_vrr);
           g_assert_cmpint (monitor_config->has_max_bpc,
                            ==,
                            !!test_monitor->max_bpc);
@@ -454,6 +458,51 @@
 }
 
 static void
+meta_test_monitor_store_vrr_disallowed (void)
+{
+  MonitorStoreTestExpect expect = {
+    .configurations = {
+      {
+        .logical_monitors = {
+          {
+            .layout = {
+              .x = 0,
+              .y = 0,
+              .width = 1024,
+              .height = 768
+            },
+            .scale = 1,
+            .is_primary = TRUE,
+            .is_presentation = FALSE,
+            .monitors = {
+              {
+                .connector = "DP-1",
+                .vendor = "MetaProduct's Inc.",
+                .product = "MetaMonitor",
+                .serial = "0x123456",
+                .mode = {
+                  .width = 1024,
+                  .height = 768,
+                  .refresh_rate = 60.000495910644531
+                },
+                .disallow_vrr = TRUE,
+              }
+            },
+            .n_monitors = 1,
+          },
+        },
+        .n_logical_monitors = 1
+      }
+    },
+    .n_configurations = 1
+  };
+
+  meta_set_custom_monitor_config (test_context, "vrr-disallowed.xml");
+
+  check_monitor_store_configurations (&expect);
+}
+
+static void
 meta_test_monitor_store_max_bpc (void)
 {
   MonitorStoreTestExpect expect = {
@@ -1047,6 +1096,8 @@
                    meta_test_monitor_store_primary);
   g_test_add_func ("/backends/monitor-store/underscanning",
                    meta_test_monitor_store_underscanning);
+  g_test_add_func ("/backends/monitor-store/vrr-disallowed",
+                   meta_test_monitor_store_vrr_disallowed);
   g_test_add_func ("/backends/monitor-store/max-bpc",
                    meta_test_monitor_store_max_bpc);
   g_test_add_func ("/backends/monitor-store/scale",
diff '--color=auto' -ruN a/src/tests/monitor-unit-tests.c b/src/tests/monitor-unit-tests.c
--- a/src/tests/monitor-unit-tests.c	2023-09-16 23:51:03.000000000 +0300
+++ b/src/tests/monitor-unit-tests.c	2023-10-07 22:05:39.841763050 +0300
@@ -3255,6 +3255,100 @@
 }
 
 static void
+meta_test_monitor_vrr_disallowed_config (void)
+{
+  MonitorTestCase test_case = {
+    .setup = {
+      .modes = {
+        {
+          .width = 1024,
+          .height = 768,
+          .refresh_rate = 60.0
+        }
+      },
+      .n_modes = 1,
+      .outputs = {
+        {
+          .crtc = 0,
+          .modes = { 0 },
+          .n_modes = 1,
+          .preferred_mode = 0,
+          .possible_crtcs = { 0 },
+          .n_possible_crtcs = 1,
+          .width_mm = 222,
+          .height_mm = 125,
+          .is_vrr_disallowed = TRUE,
+        }
+      },
+      .n_outputs = 1,
+      .crtcs = {
+        {
+          .current_mode = 0
+        }
+      },
+      .n_crtcs = 1
+    },
+
+    .expect = {
+      .monitors = {
+        {
+          .outputs = { 0 },
+          .n_outputs = 1,
+          .modes = {
+            {
+              .width = 1024,
+              .height = 768,
+              .refresh_rate = 60.0,
+              .crtc_modes = {
+                {
+                  .output = 0,
+                  .crtc_mode = 0
+                }
+              }
+            }
+          },
+          .n_modes = 1,
+          .current_mode = 0,
+          .width_mm = 222,
+          .height_mm = 125,
+          .is_vrr_disallowed = TRUE,
+        }
+      },
+      .n_monitors = 1,
+      .logical_monitors = {
+        {
+          .monitors = { 0 },
+          .n_monitors = 1,
+          .layout = { .x = 0, .y = 0, .width = 1024, .height = 768 },
+          .scale = 1
+        }
+      },
+      .n_logical_monitors = 1,
+      .primary_logical_monitor = 0,
+      .n_outputs = 1,
+      .crtcs = {
+        {
+          .current_mode = 0,
+        }
+      },
+      .n_crtcs = 1,
+      .screen_width = 1024,
+      .screen_height = 768
+    }
+  };
+  MetaMonitorTestSetup *test_setup;
+
+  test_setup = meta_create_monitor_test_setup (test_backend,
+                                               &test_case.setup,
+                                               MONITOR_TEST_FLAG_NO_STORED);
+  emulate_hotplug (test_setup);
+  META_TEST_LOG_CALL ("Checking monitor configuration",
+                      meta_check_monitor_configuration (test_context,
+                                                        &test_case.expect));
+  check_monitor_test_clients_state ();
+}
+
+static void
 meta_test_monitor_max_bpc_config (void)
 {
   MonitorTestCase test_case = {
@@ -5840,6 +5934,103 @@
 }
 
 static void
+meta_test_monitor_custom_vrr_disallowed_config (void)
+{
+  MonitorTestCase test_case = {
+    .setup = {
+      .modes = {
+        {
+          .width = 1024,
+          .height = 768,
+          .refresh_rate = 60.000495910644531
+        }
+      },
+      .n_modes = 1,
+      .outputs = {
+        {
+          .crtc = 0,
+          .modes = { 0 },
+          .n_modes = 1,
+          .preferred_mode = 0,
+          .possible_crtcs = { 0 },
+          .n_possible_crtcs = 1,
+          .width_mm = 222,
+          .height_mm = 125,
+          .serial = "0x123456",
+        },
+      },
+      .n_outputs = 1,
+      .crtcs = {
+        {
+          .current_mode = 0
+        },
+      },
+      .n_crtcs = 1
+    },
+
+    .expect = {
+      .monitors = {
+        {
+          .outputs = { 0 },
+          .n_outputs = 1,
+          .modes = {
+            {
+              .width = 1024,
+              .height = 768,
+              .refresh_rate = 60.000495910644531,
+              .crtc_modes = {
+                {
+                  .output = 0,
+                  .crtc_mode = 0
+                }
+              }
+            }
+          },
+          .n_modes = 1,
+          .current_mode = 0,
+          .width_mm = 222,
+          .height_mm = 125,
+          .is_vrr_disallowed = TRUE,
+        }
+      },
+      .n_monitors = 1,
+      .logical_monitors = {
+        {
+          .monitors = { 0 },
+          .n_monitors = 1,
+          .layout = { .x = 0, .y = 0, .width = 1024, .height = 768 },
+          .scale = 1
+        }
+      },
+      .n_logical_monitors = 1,
+      .primary_logical_monitor = 0,
+      .n_outputs = 1,
+      .crtcs = {
+        {
+          .current_mode = 0,
+        }
+      },
+      .n_crtcs = 1,
+      .n_tiled_monitors = 0,
+      .screen_width = 1024,
+      .screen_height = 768
+    }
+  };
+  MetaMonitorTestSetup *test_setup;
+
+  test_setup = meta_create_monitor_test_setup (test_backend,
+                                               &test_case.setup,
+                                               MONITOR_TEST_FLAG_NONE);
+  meta_set_custom_monitor_config (test_context, "vrr-disallowed.xml");
+  emulate_hotplug (test_setup);
+
+  META_TEST_LOG_CALL ("Checking monitor configuration",
+                      meta_check_monitor_configuration (test_context,
+                                                        &test_case.expect));
+  check_monitor_test_clients_state ();
+}
+
+static void
 meta_test_monitor_custom_scale_config (void)
 {
   MonitorTestCase test_case = {
@@ -9624,6 +9815,8 @@
                     meta_test_monitor_no_outputs);
   add_monitor_test ("/backends/monitor/underscanning-config",
                     meta_test_monitor_underscanning_config);
+  add_monitor_test ("/backends/monitor/vrr-disallowed-config",
+                    meta_test_monitor_vrr_disallowed_config);
   add_monitor_test ("/backends/monitor/max-bpc-config",
                     meta_test_monitor_max_bpc_config);
   add_monitor_test ("/backends/monitor/preferred-non-first-mode",
@@ -9658,6 +9851,8 @@
                     meta_test_monitor_custom_primary_config);
   add_monitor_test ("/backends/monitor/custom/underscanning-config",
                     meta_test_monitor_custom_underscanning_config);
+  add_monitor_test ("/backends/monitor/custom/vrr-disallowed-config",
+                    meta_test_monitor_custom_vrr_disallowed_config);
   add_monitor_test ("/backends/monitor/custom/scale-config",
                     meta_test_monitor_custom_scale_config);
   add_monitor_test ("/backends/monitor/custom/fractional-scale-config",
